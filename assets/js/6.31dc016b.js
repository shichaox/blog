(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{425:function(t,a,s){t.exports=s.p+"assets/img/image-20231108154656427.51f4e29c.png"},426:function(t,a,s){t.exports=s.p+"assets/img/image-20231108154717126.3933966d.png"},427:function(t,a,s){t.exports=s.p+"assets/img/image-20231108193409315.b858015a.png"},428:function(t,a,s){t.exports=s.p+"assets/img/image-20231109193547119.109f87d0.png"},429:function(t,a,s){t.exports=s.p+"assets/img/image-20231112155734081.4f55ae01.png"},430:function(t,a,s){t.exports=s.p+"assets/img/image-20231112155918363.a9b265e0.png"},431:function(t,a,s){t.exports=s.p+"assets/img/image-20231112155931210.34101161.png"},432:function(t,a,s){t.exports=s.p+"assets/img/image-20231112160629568.15da5cbb.png"},433:function(t,a,s){t.exports=s.p+"assets/img/image-20231112160715710.39c48dba.png"},434:function(t,a,s){t.exports=s.p+"assets/img/image-20231112160732976.416ed68a.png"},435:function(t,a,s){t.exports=s.p+"assets/img/image-20231112160757799.59e446b4.png"},436:function(t,a,s){t.exports=s.p+"assets/img/image-20231112160828953.e712dd1c.png"},437:function(t,a,s){t.exports=s.p+"assets/img/image-20231112160923202.cc9e550a.png"},438:function(t,a,s){t.exports=s.p+"assets/img/image-20231112160945689.ccbda46d.png"},492:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"面经"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面经"}},[t._v("#")]),t._v(" 面经")]),t._v(" "),a("h2",{attrs:{id:"_1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1"}},[t._v("#")]),t._v(" 1.")]),t._v(" "),a("p",[a("img",{attrs:{src:s(425),alt:"image-20231108154656427"}})]),t._v(" "),a("p",[t._v("思特奇面试")]),t._v(" "),a("h3",{attrs:{id:"自我介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自我介绍"}},[t._v("#")]),t._v(" 自我介绍")]),t._v(" "),a("h3",{attrs:{id:"项目相关-购物车是怎么设计的-怎么防止重复提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目相关-购物车是怎么设计的-怎么防止重复提交"}},[t._v("#")]),t._v(" 项目相关: 购物车是怎么设计的? 怎么防止重复提交?")]),t._v(" "),a("p",[t._v("购物车的设计：购物车通常是一个用于存储用户选购商品信息的功能模块。它可以使用数据库或缓存等方式进行存储，并与用户的会话关联。购物车设计一般包括添加商品到购物车、修改商品数量、删除商品、计算总价等功能。购物车可以使用Cookie或Session等方式来保持用户的购物状态。")]),t._v(" "),a("p",[t._v("防止重复提交的方法：")]),t._v(" "),a("ul",[a("li",[t._v("前端校验：在前端页面使用JavaScript对提交按钮进行禁用或显示加载状态，防止用户多次点击提交按钮。")]),t._v(" "),a("li",[t._v("后端校验：在后端接收到请求时，可以通过生成唯一的表单令牌（Token）并将其存储在会话或隐藏表单字段中。后续的请求需要携带有效的令牌，用于校验请求的合法性。")])]),t._v(" "),a("h3",{attrs:{id:"项目分了哪几块了。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目分了哪几块了。"}},[t._v("#")]),t._v(" 项目分了哪几块了。")]),t._v(" "),a("p",[t._v("根据功能划分为不同的模块或子系统，例如用户管理模块、订单管理模块、支付模块、商品管理模块等。")]),t._v(" "),a("h3",{attrs:{id:"注册中心用的是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注册中心用的是什么"}},[t._v("#")]),t._v(" 注册中心用的是什么")]),t._v(" "),a("p",[t._v("Nacos，介绍Nacos")]),t._v(" "),a("p",[t._v("注册中心使用的是Nacos：Nacos是一个用于实现动态服务发现、配置管理和服务治理的开源项目。它可以作为注册中心使用，用于服务的注册与发现。通过Nacos，服务可以将自己的信息注册到注册中心，并且可以从注册中心查询到其他服务的信息，实现服务之间的通信和协作。")]),t._v(" "),a("h3",{attrs:{id:"消息中间件是拿来做缓存的是吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息中间件是拿来做缓存的是吗"}},[t._v("#")]),t._v(" 消息中间件是拿来做缓存的是吗?")]),t._v(" "),a("p",[t._v("介绍消息中间件")]),t._v(" "),a("p",[t._v("消息中间件用于消息传递而不是缓存：消息中间件用于实现分布式系统中的异步通信和解耦。它提供了消息的可靠传递、消息的发布与订阅等功能。与缓存不同，消息中间件主要解决系统之间的消息通信和解耦问题，而不是用于数据的缓存。")]),t._v(" "),a("h3",{attrs:{id:"rocketmq是实现的顺序消费吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq是实现的顺序消费吗"}},[t._v("#")]),t._v(" RocketMQ是实现的顺序消费吗?")]),t._v(" "),a("p",[t._v("RocketMQ实现的是顺序消费")]),t._v(" "),a("h3",{attrs:{id:"如果一个用户发送多条消息-想要实现该用户的顺序消费该怎么实现-消息中间件实现顺序消费应该怎么做"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如果一个用户发送多条消息-想要实现该用户的顺序消费该怎么实现-消息中间件实现顺序消费应该怎么做"}},[t._v("#")]),t._v(" 如果一个用户发送多条消息，想要实现该用户的顺序消费该怎么实现?消息中间件实现顺序消费应该怎么做")]),t._v(" "),a("h3",{attrs:{id:"对注册中心是怎么理解的-怎么使用注册中心"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对注册中心是怎么理解的-怎么使用注册中心"}},[t._v("#")]),t._v(" 对注册中心是怎么理解的? 怎么使用注册中心?")]),t._v(" "),a("h3",{attrs:{id:"typehandler是怎么使用的-作用是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typehandler是怎么使用的-作用是什么"}},[t._v("#")]),t._v(" TypeHandler是怎么使用的，作用是什么")]),t._v(" "),a("p",[t._v("举例：数据库中的字段为varchar类型，要转换成Java中的String数组类型。")]),t._v(" "),a("p",[t._v("TypeHandler的使用和作用：TypeHandler是MyBatis框架中的一个功能组件，用于处理Java对象与数据库字段之间的类型转换。它负责将Java对象转换为数据库字段值存储到数据库，以及将数据库字段值转换为Java对象进行数据查询和映射。TypeHandler可以自定义实现，以满足不同类型的转换需求，例如将枚举类型映射为数据库字段。")]),t._v(" "),a("h3",{attrs:{id:"mybatis-是自己写xml文件吗还是使用注解-namespace是否可以重复-sqlid的标签用过吗-动态配有哪些标签-有一个场景-有一个查询8-会带各种条件-会用到动态匹配去看有什么输入。where条件写的时候-抛开if标签-所有条件有可能会全部查-有可能会带两个条件或者三个条件去查-如果一个条件都不带可能会全表查询-这种一般是怎么写的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-是自己写xml文件吗还是使用注解-namespace是否可以重复-sqlid的标签用过吗-动态配有哪些标签-有一个场景-有一个查询8-会带各种条件-会用到动态匹配去看有什么输入。where条件写的时候-抛开if标签-所有条件有可能会全部查-有可能会带两个条件或者三个条件去查-如果一个条件都不带可能会全表查询-这种一般是怎么写的"}},[t._v("#")]),t._v(" mybatis:是自己写Xml文件吗还是使用注解? namespace是否可以重复?SQLID的标签用过吗?动态配有哪些标签?有一个场景，有一个查询8.会带各种条件，会用到动态匹配去看有什么输入。where条件写的时候，抛开if标签，所有条件有可能会全部查，有可能会带两个条件或者三个条件去查，如果一个条件都不带可能会全表查询，这种一般是怎么写的")]),t._v(" "),a("h3",{attrs:{id:"数据库中哪些情况会导致索引失效"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库中哪些情况会导致索引失效"}},[t._v("#")]),t._v(" 数据库中哪些情况会导致索引失效?")]),t._v(" "),a("ul",[a("li",[t._v("列表达式：如果索引列上使用了函数、表达式或类型转换，可能导致索引失效。")]),t._v(" "),a("li",[t._v("索引列参与计算：如果查询条件中对索引列进行了计算，可能导致索引失效。")]),t._v(" "),a("li",[t._v("数据类型不匹配：如果查询条件的数据类型与索引列的数据类型不匹配，可能导致索引失效。")]),t._v(" "),a("li",[t._v("使用了不等于操作符：一些数据库对于不等于操作符（如"),a("code",[t._v("<>")]),t._v("）无法使用索引。")]),t._v(" "),a("li",[t._v("数据量过小：如果表中的数据量非常小，使用索引可能不会带来性能提升，甚至会造成性能下降。")])]),t._v(" "),a("h3",{attrs:{id:"如果输入的是integer-但是数据库中是varchar-会导致索引失效吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如果输入的是integer-但是数据库中是varchar-会导致索引失效吗"}},[t._v("#")]),t._v(" 如果输入的是integer，但是数据库中是varchar，会导致索引失效吗?")]),t._v(" "),a("p",[t._v("输入的类型不匹配可能导致索引失效：如果输入的数据类型与索引列的数据类型不匹配，数据库可能无法正确使用索引进行查询，导致索引失效。")]),t._v(" "),a("h3",{attrs:{id:"怎么看表的字段类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#怎么看表的字段类型"}},[t._v("#")]),t._v(" 怎么看表的字段类型?")]),t._v(" "),a("ol",[a("li",[t._v("使用SQL查询：可以使用SQL语句查询表的结构信息，包括字段名和字段类型。")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DESCRIBE")]),t._v(" table_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v('将"table_name"替换为要查看的表名，执行该SQL语句即可查看表的字段类型。')]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[t._v("使用数据库管理工具：常见的数据库管理工具（如MySQL Workbench、Navicat等）提供了可视化界面来查看表的结构信息。通过连接到数据库并导航到相应的表，可以查看每个字段的名称、数据类型和其他属性。")])]),t._v(" "),a("li",[a("p",[t._v("使用数据库元数据查询：通过数据库的元数据（metadata）可以获取表的结构信息。具体的方法取决于使用的数据库系统。")])])]),t._v(" "),a("h3",{attrs:{id:"新建表模型是怎么做的-表空间怎么自定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新建表模型是怎么做的-表空间怎么自定义"}},[t._v("#")]),t._v(" 新建表模型是怎么做的? 表空间怎么自定义?")]),t._v(" "),a("h3",{attrs:{id:"项目线上有没有遇到问题-线上问题排查有无经验"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目线上有没有遇到问题-线上问题排查有无经验"}},[t._v("#")]),t._v(" 项目线上有没有遇到问题，线上问题排查有无经验")]),t._v(" "),a("h3",{attrs:{id:"是否用过多线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是否用过多线程"}},[t._v("#")]),t._v(" 是否用过多线程")]),t._v(" "),a("h3",{attrs:{id:"springbootapplication注解干了些什么事情"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springbootapplication注解干了些什么事情"}},[t._v("#")]),t._v(" SpringBootApplication注解干了些什么事情")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("@SpringBootApplication")]),t._v(" 注解是 Spring Boot 框架中的核心注解之一，它结合了以下三个注解的功能：")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("@Configuration")]),t._v("：标识该类是一个配置类，用于定义和配置 Bean。")]),t._v(" "),a("li",[a("code",[t._v("@EnableAutoConfiguration")]),t._v("：启用自动配置，让 Spring Boot 根据项目的依赖配置自动进行配置。")]),t._v(" "),a("li",[a("code",[t._v("@ComponentScan")]),t._v("：开启组件扫描，自动扫描并加载符合条件的组件（包括注解标记的类和 Bean）。")])]),t._v(" "),a("p",[a("code",[t._v("@SpringBootApplication")]),t._v(" 注解的作用是将一个标准的 Java 类标记为 Spring Boot 应用程序的入口点。当应用程序启动时，Spring Boot 将扫描该类所在的包及其子包，自动配置 Spring 应用程序上下文和其他必要的组件，以便运行 Spring Boot 应用程序。")]),t._v(" "),a("h3",{attrs:{id:"linux的命令。如果我要看这台机器有哪些java进程怎么看。管道命令-top命令。怎么看日志文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux的命令。如果我要看这台机器有哪些java进程怎么看。管道命令-top命令。怎么看日志文件"}},[t._v("#")]),t._v(" Linux的命令。如果我要看这台机器有哪些java进程怎么看。管道命令，top命令。怎么看日志文件")]),t._v(" "),a("ol",[a("li",[t._v("在 Linux 上查看 Java 进程可以使用 "),a("code",[t._v("ps")]),t._v(" 命令配合 "),a("code",[t._v("grep")]),t._v(" 命令。具体命令如下：")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-ef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("java")]),t._v("\n")])])]),a("p",[t._v("该命令会列出所有正在运行的进程，并通过管道将结果传递给 "),a("code",[t._v("grep")]),t._v(' 命令进行过滤，只显示包含 "java" 关键字的进程。')]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("要查看日志文件，可以使用 "),a("code",[t._v("cat")]),t._v(" 命令或 "),a("code",[t._v("tail")]),t._v(" 命令。以下是两个常用的示例：")])]),t._v(" "),a("ul",[a("li",[t._v("使用 "),a("code",[t._v("cat")]),t._v(" 命令查看完整的日志文件内容：")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" /path/to/logfile.log\n")])])]),a("p",[t._v('将 "/path/to/logfile.log" 替换为实际的日志文件路径。')]),t._v(" "),a("ul",[a("li",[t._v("使用 "),a("code",[t._v("tail")]),t._v(" 命令查看最后几行的日志内容（常用于实时查看日志）：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("tail -n 100 /path/to/logfile.log\n")])])]),a("p",[t._v('将 "/path/to/logfile.log" 替换为实际的日志文件路径，并将 "-n 100" 替换为要显示的行数。')]),t._v(" "),a("p",[a("code",[t._v("tail")]),t._v(" 命令还支持 "),a("code",[t._v("-f")]),t._v(" 参数，可以实时监视日志文件的新增内容。例如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("tail -f /path/to/logfile.log\n")])])]),a("p",[t._v("上述命令将持续输出新添加到日志文件中的内容，以便实时查看日志。要停止查看日志，可以使用 Ctrl+C 组合键终止 "),a("code",[t._v("tail")]),t._v(" 命令的执行。")]),t._v(" "),a("h2",{attrs:{id:"_2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2"}},[t._v("#")]),t._v(" 2.")]),t._v(" "),a("p",[a("img",{attrs:{src:s(426),alt:"image-20231108154717126"}})]),t._v(" "),a("h3",{attrs:{id:"自我介绍-包括印象深刻的做了哪些项目-项目中遇到的问题-怎么解决的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自我介绍-包括印象深刻的做了哪些项目-项目中遇到的问题-怎么解决的"}},[t._v("#")]),t._v(" 自我介绍 (包括印象深刻的做了哪些项目，项目中遇到的问题，怎么解决的)")]),t._v(" "),a("h3",{attrs:{id:"根据自我介绍问了一些项目的问题-自己负责的模块整体流程和业务逻辑是什么样的-用户量大概是多少-怎么解决的高并发的问题。有没有遇到过异常-怎么解决的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#根据自我介绍问了一些项目的问题-自己负责的模块整体流程和业务逻辑是什么样的-用户量大概是多少-怎么解决的高并发的问题。有没有遇到过异常-怎么解决的"}},[t._v("#")]),t._v(" 根据自我介绍问了一些项目的问题，自己负责的模块整体流程和业务逻辑是什么样的，用户量大概是多少，怎么解决的高并发的问题。有没有遇到过异常，怎么解决的")]),t._v(" "),a("h3",{attrs:{id:"redis用的是集群还是单机部署的-是谁搭建的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis用的是集群还是单机部署的-是谁搭建的"}},[t._v("#")]),t._v(" redis用的是集群还是单机部署的，是谁搭建的")]),t._v(" "),a("h3",{attrs:{id:"数据库索引相关的一个选择题-考查的是最左前缀匹配原则。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库索引相关的一个选择题-考查的是最左前缀匹配原则。"}},[t._v("#")]),t._v(" 数据库索引相关的一个选择题，考查的是最左前缀匹配原则。")]),t._v(" "),a("p",[t._v("题目忘了截了，根据我的记忆大致是这样子的:\n有一张表tb_name有四个字段A int,B int,c int,D nt;建立了复合索引(A,B,C)下面哪些情况用到的索引:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("A. select * from tb_name where 1=1 AND A=1 AND B=2:\nA. select * from tb_name where A=1 AND B=2;\nc. select * from tb_name where A=1 AND C=2;\nD. select * from tb_name where C=1 AND B=2:\n")])])]),a("h3",{attrs:{id:"一个java手写题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一个java手写题"}},[t._v("#")]),t._v(" 一个java手写题")]),t._v(" "),a("p",[t._v("自定义学生列表\n1，对学生列表根据年龄降序排序\n2。对学生按照性别分组\n对容器有无了解\n异常类型 (运行时异常和编译时异常)，区别。try.....catch....finally和try....catch.....区别6")]),t._v(" "),a("h2",{attrs:{id:"_3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3"}},[t._v("#")]),t._v(" 3.")]),t._v(" "),a("p",[a("img",{attrs:{src:s(427),alt:"image-20231108193409315"}})]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onSale")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v(" skuId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这种方法写复杂了，可以直接使用Mybatis-plus提供的updateById方法")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LambdaUpdateWrapper")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SkuInfo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" updateWrapper "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LambdaUpdateWrapper")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        updateWrapper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("eq")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SkuInfo")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" skuId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SkuInfo")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getIsSale")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        skuInfoMapper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" updateWrapper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//添加到布隆过滤器")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RBloomFilter")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" bloomFilter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" redissonClient"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBloomFilter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RedisConst")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SKU_BLOOM_FILTER")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        bloomFilter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("skuId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将该商品信息添加到ElasticSearch中")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//        searchApiClient.upperGoods(skuId);")]),t._v("\n        baseProducer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MqTopicConst")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PRODUCT_ONSALE_TOPIC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" skuId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"自我介绍-项目介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自我介绍-项目介绍"}},[t._v("#")]),t._v(" 自我介绍，项目介绍")]),t._v(" "),a("h3",{attrs:{id:"搭建-elasticsearch-使用多长时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#搭建-elasticsearch-使用多长时间"}},[t._v("#")]),t._v(" 搭建 ElasticSearch 使用多长时间?")]),t._v(" "),a("h3",{attrs:{id:"商品怎么同步到-elasticsearch-中-rocketmq-怎么保证上下架一致"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#商品怎么同步到-elasticsearch-中-rocketmq-怎么保证上下架一致"}},[t._v("#")]),t._v(" 商品怎么同步到 ElasticSearch 中?RocketMQ 怎么保证上下架一致?")]),t._v(" "),a("p",[t._v("① 在上下架接口中发送上下架消息，定义好的上下架消费者中的消息监听器在收到消息后调用Service层的针对ES的上下架服务。")]),t._v(" "),a("p",[t._v("②上架服务")]),t._v(" "),a("p",[t._v("从数据库获取商品数据，使用Spring Date ES提供的增删改查接口保存商品信息。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("upperGoods")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v(" skuId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//a. 创建一个document对应的类型对象，然后查询其相应的属性对应的参数值，")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 然后给这些属性赋值(查询属性使用Product对外提供的API接口)。")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Goods")]),t._v(" goods "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Goods")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 属性主要有商品的基本信息、类目信息、品牌信息、平台属性")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 基本信息")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取价格")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 类目信息")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 品牌信息")]),t._v("\n       \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 平台属性")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//b. 调用Repository的save方法将商品信息添加到ES。")]),t._v("\n        goodsRepository"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("save")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("goods"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("③ 下架服务")]),t._v(" "),a("p",[t._v("使用Spring Date ES提供的deleteById方法从ES中删除指定商品。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lowerGoods")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v(" skuId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用Repository的deleteById方法删除。")]),t._v("\n        goodsRepository"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deleteById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("skuId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("Spring Date ElasticSearch")]),t._v("(它和ES的关系相当于Mybatis-Plus和MySQL的关系)")]),t._v(" "),a("p",[t._v("类比于"),a("strong",[t._v("Mybatis-Plus")]),t._v("中定义"),a("strong",[t._v("BaseMapper子接口")]),t._v("即可实现对单表做"),a("strong",[t._v("增删改查")]),t._v("的操作，"),a("strong",[t._v("Spring Date Elasticsearch")]),t._v("通过"),a("strong",[t._v("ElasticSearchRepository子接口")]),t._v("，实现对索引中的文档数据进行"),a("strong",[t._v("增删改查")]),t._v("，以及通过自定义的方法，实现自定义查询。")]),t._v(" "),a("p",[t._v("类比于MyBatis-Plus可以定义"),a("strong",[t._v("实体类")]),t._v("去映射"),a("strong",[t._v("数据库中的表中的数据")]),t._v("，使用Spring Date ElasticSearch也可以定义一个"),a("strong",[t._v("实体类")]),t._v("映射"),a("strong",[t._v("ES中的文档")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GoodsRepository")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElasticsearchRepository")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Goods")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"创建-easticsearch-使用商品的哪些信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建-easticsearch-使用商品的哪些信息"}},[t._v("#")]),t._v(" 创建 EasticSearch 使用商品的哪些信息?")]),t._v(" "),a("h3",{attrs:{id:"订单的处理有做吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#订单的处理有做吗"}},[t._v("#")]),t._v(" 订单的处理有做吗?")]),t._v(" "),a("h3",{attrs:{id:"订单处理怎么处理-哪些活动有订单操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#订单处理怎么处理-哪些活动有订单操作"}},[t._v("#")]),t._v(" 订单处理怎么处理?(哪些活动有订单操作)")]),t._v(" "),a("h3",{attrs:{id:"介绍一下秒杀"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍一下秒杀"}},[t._v("#")]),t._v(" 介绍一下秒杀?")]),t._v(" "),a("p",[a("strong",[t._v("缓存预热")])]),t._v(" "),a("p",[t._v("使用Spring定时任务每天凌晨两点将当天的秒杀活动商品数据加载到Redis中。")]),t._v(" "),a("blockquote",[a("p",[t._v("缓存预热就是系统启动前，提前将相关数据直接加载到缓存系统。避免在用户请求的时候，先查询数据库，然后再将数据缓存。")])]),t._v(" "),a("p",[t._v("如果不考虑缓存，那么每次都需要访问直接数据库。而秒杀列表页和秒杀商品详情页的点击量一般会比较大，那势必会给数据库带来很大的压力，所以在此考虑使用缓存预热的方案。")]),t._v(" "),a("p",[a("strong",[t._v("使用状态位控制访问请求")])]),t._v(" "),a("p",[t._v("我们在内存中保持一个状态位，当抢购开始时状态为1，可以抢购，当库存为0时状态位为0，不能抢购。状态位的好处是它是在内存中判断，压力比较小，可以阻止很多不必要的请求。")]),t._v(" "),a("p",[a("strong",[t._v("秒杀排队实现方式")])]),t._v(" "),a("p",[t._v("用户提交秒杀请求，将秒杀商品与用户id关联发送给消息队列，然后返回。通过消息队列排队抢购秒杀资格。秒杀页面通过轮询接口查看是否秒杀成功。")]),t._v(" "),a("p",[t._v("我们秒杀只是为了获取一个秒杀资格，获取秒杀资格后就可以到下单页面下订单，后续业务和正常订单一样。")]),t._v(" "),a("p",[a("strong",[t._v("库存超卖问题")])]),t._v(" "),a("p",[t._v("使用Redis队列存储商品库存，利用Redis队列的原子性，保证库存不超卖。")]),t._v(" "),a("p",[t._v("使用Redis+RocketMQ完成")]),t._v(" "),a("p",[t._v("秒杀商品数据使用缓存预热，使用Spring定时任务每天凌晨两点将当天的秒杀活动商品数据加载到Redis中")]),t._v(" "),a("p",[a("strong",[t._v("缓存预热")])]),t._v(" "),a("p",[t._v("在凌晨将当天的所有秒杀商品从数据库中放入redis缓存")]),t._v(" "),a("p",[t._v("① 从数据库中查询状态为审核通过、开始时间在当天、库存大于的商品。")]),t._v(" "),a("p",[t._v("② 在redis中使用一个hash存储当天的商品，遍历当天的每个商品，将他们放入redis的hash中。hash的field为商品id，value为商品信息。")]),t._v(" "),a("p",[t._v("③ 使用一个队列表示每个商品的库存，添加一个元素(商品id)代表新增一个库存，移除一个元素就代表减少一个库存。")]),t._v(" "),a("p",[t._v('④ 初始化库存标志位为"1"，表示有库存。')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th"),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("缓存预热")]),t._v(" "),a("td",[t._v("使用Spring定时任务每天凌晨两点将当天的秒杀活动商品数据加载到Redis中。")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("秒杀商品列表")]),t._v(" "),a("td",[t._v("返回所有的秒杀商品")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("秒杀商品详情")]),t._v(" "),a("td",[t._v("返回指定的秒杀商品")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("秒杀下单排队")]),t._v(" "),a("td",[t._v("获取下单码、秒杀下单排队")]),t._v(" "),a("td",[a("strong",[t._v("下单码")]),t._v("主要目的是秒杀下单的时候校验用户请求，防止非法请求参与秒杀。")])]),t._v(" "),a("tr",[a("td",[t._v("秒杀下单消费")]),t._v(" "),a("td",[t._v("1. 判断状态位(看是否有库存)。2.标记用户下单(使用redis.setnx(userId))。3.获取库存队列。4.弹出库存。5.生成订单记录，存入Redis。")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("检查秒杀下单结果")]),t._v(" "),a("td",[t._v("1.  判断用户是否已经下过单。 2. 判断Redis中是否已经存在用户的订单，如果存在，说明抢单成功，返回秒杀成功状态码。3. 如果不满足1和2中的条件，就执行后面的。4. 判断库存标志位，看是否有库存，没有库存据返回已售罄标志位。5. 以上都不满足，就返回正在排队中。")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("秒杀下单商品确认页")]),t._v(" "),a("td",[t._v("当抢购成功之后，前端页面显示抢购成功，去下单。和订单服务的下单商品确认页逻辑类似。1. 从Redis中获取下单记录OrderRecord，然后获取秒杀详情SeckillGoods。 2. 获取用户地址 3. 构建OrderTradeDTO(下单确认页信息)")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("秒杀下单生成(提交)订单")]),t._v(" "),a("td",[t._v("1. 获取用户id。 2. 判断是否已经提交过订单，如果已经提交过订单，就返回相应的失败状态码。3. 远程调用订单服务，生成秒杀订单。4. 删除Redis中的下单信息。5. 在Redis中增加秒杀提交标记，表示用户已经提交了订单。")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("定时任务清除缓存")]),t._v(" "),a("td",[t._v("每天在固定时间清除当天的秒杀数据")]),t._v(" "),a("td")])])]),t._v(" "),a("h3",{attrs:{id:"前端怎么知道下单成功"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端怎么知道下单成功"}},[t._v("#")]),t._v(" 前端怎么知道下单成功?")]),t._v(" "),a("p",[t._v("检查秒杀下单结果的接口判断下单状态后返回给前端一个状态码。前端根据下单结果状态码判断下单是否成功。")]),t._v(" "),a("p",[t._v("例如：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("状态码")]),t._v(" "),a("th",[t._v("状态")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("211")]),t._v(" "),a("td",[t._v("排队中")])]),t._v(" "),a("tr",[a("td",[t._v("215")]),t._v(" "),a("td",[t._v("抢购成功，去下单")])]),t._v(" "),a("tr",[a("td",[t._v("218")]),t._v(" "),a("td",[t._v("下单成功，已经生成订单")])]),t._v(" "),a("tr",[a("td",[t._v("其他")]),t._v(" "),a("td",[t._v("抢购失败")])])])]),t._v(" "),a("p",[t._v("前端通过轮询访问下单结果检查的接口刷新抢购状态。")]),t._v(" "),a("h3",{attrs:{id:"rocketmq-怎么保证被准确消费"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq-怎么保证被准确消费"}},[t._v("#")]),t._v(" RocketMQ 怎么保证被准确消费?")]),t._v(" "),a("p",[t._v("标记用户下单(使用redis.setnx(userId))，避免重复消费。")]),t._v(" "),a("h3",{attrs:{id:"rocketmq-怎么确定消费成功"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq-怎么确定消费成功"}},[t._v("#")]),t._v(" RocketMQ 怎么确定消费成功?")]),t._v(" "),a("p",[t._v("在消费者消息监听器中，消息消费成功后，返回一个消费成功的状态码("),a("code",[t._v("ConsumeConcurrentlyStatus.CONSUME_SUCCESS")]),t._v(")。")]),t._v(" "),a("p",[t._v("如果出现异常，就返回消息重试状态码。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置消息监听器")]),t._v("\nconsumer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setMessageListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MessageListenerConcurrently")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConsumeConcurrentlyStatus")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("consumeMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MessageExt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" msgs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConsumeConcurrentlyContext")]),t._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" endTime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentTimeMillis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 获取消息")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MessageExt")]),t._v(" message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" msgs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" startTimeStr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUserProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"startTimeStr"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"time span: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("endTime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseLong")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("startTimeStr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// 2. 获取消息体数据")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" body "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBody")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3. 消费")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"utf-8"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMsgId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('": "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConsumeConcurrentlyStatus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RECONSUME_LATER")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConsumeConcurrentlyStatus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CONSUME_SUCCESS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"项目环境是你搭建的还是谁搭建的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目环境是你搭建的还是谁搭建的"}},[t._v("#")]),t._v(" 项目环境是你搭建的还是谁搭建的?")]),t._v(" "),a("h3",{attrs:{id:"rocketmq-的选型-为什么用这个"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq-的选型-为什么用这个"}},[t._v("#")]),t._v(" RocketMQ 的选型，为什么用这个?")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("消息中间件")]),t._v(" "),a("th",[t._v("优点")]),t._v(" "),a("th",[t._v("不足")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("RocketMQ")]),t._v(" "),a("td",[t._v("经历过世界上绝无仅有的高并发的实战的考验(双十一)")]),t._v(" "),a("td",[t._v("社区不够活跃")])]),t._v(" "),a("tr",[a("td",[t._v("ActiveMQ")]),t._v(" "),a("td",[t._v("主要使用场景就是解耦和异步调用。")]),t._v(" "),a("td",[t._v("没经过大规模吞吐量场景的验证，开源社区不活跃")])]),t._v(" "),a("tr",[a("td",[t._v("RabbitMQ")]),t._v(" "),a("td",[t._v("使用erlang开发，队列基于内存，高并发低延迟。")]),t._v(" "),a("td",[t._v("开发语言小众，不利于自己基于源码开发扩展，遇到bug调试起来比较麻烦")])]),t._v(" "),a("tr",[a("td",[t._v("Kafka")]),t._v(" "),a("td",[t._v("可以实时的处理大量的数据，比如基于hadoop的批处理系统")]),t._v(" "),a("td",[t._v("消费失败不支持重试，支持消息顺序，但是一台代理宕机后就会产生消息乱序")])])])]),t._v(" "),a("h3",{attrs:{id:"商品详情页是怎么样的设计-上下架-预热缓存-动态代理自定义注解等等-布隆过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#商品详情页是怎么样的设计-上下架-预热缓存-动态代理自定义注解等等-布隆过滤器"}},[t._v("#")]),t._v(" 商品详情页是怎么样的设计?(上下架，预热缓存，动态代理自定义注解等等)布隆过滤器?")]),t._v(" "),a("h3",{attrs:{id:"分布式事务-seata-解决分布式事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务-seata-解决分布式事务"}},[t._v("#")]),t._v(" 分布式事务，Seata 解决分布式事务?")]),t._v(" "),a("h3",{attrs:{id:"数据库锁-表锁-行锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库锁-表锁-行锁"}},[t._v("#")]),t._v(" 数据库锁，表锁，行锁")]),t._v(" "),a("p",[a("strong",[t._v("数据库锁")]),t._v("是用于控制并发访问数据库的机制，可以分为"),a("strong",[t._v("表锁")]),t._v("和"),a("strong",[t._v("行锁")]),t._v("两种类型。")]),t._v(" "),a("p",[a("strong",[t._v("表锁")]),t._v("是对整个表进行加锁，当一个事务获取表锁后，其他事务无法修改该表的任何数据。")]),t._v(" "),a("p",[a("strong",[t._v("行锁")]),t._v("是对表中一行的数据进行加锁，当一个事务获取行锁后，其他事务可以修改表中其他行的数据，但不能修改被锁定的行。")]),t._v(" "),a("h3",{attrs:{id:"对-redis-分布式锁的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对-redis-分布式锁的理解"}},[t._v("#")]),t._v(" 对 Redis 分布式锁的理解?")]),t._v(" "),a("p",[a("strong",[t._v("本地锁的局限性：")])]),t._v(" "),a("p",[t._v("本地锁只能锁住当前服务，只在当前服务内有效，不能保证多个服务对同一个资源的互斥访问。")]),t._v(" "),a("p",[a("strong",[t._v("分布式锁的概念：")])]),t._v(" "),a("p",[t._v("在分布式系统中，用于控制多个服务间的共享资源访问的锁。")]),t._v(" "),a("p",[a("strong",[t._v("Redis分布式锁的实现：")])]),t._v(" "),a("p",[a("strong",[t._v("使用Lua脚本")]),t._v("来保证加锁操作的原子性。因为Redis的工作线程是"),a("strong",[t._v("单线程")]),t._v("，而Lua脚本可以直接在Redis中运行，所以一段Lua脚本中运行的必然是一个原子操作。Redisson的底层就是利用Lua脚本来加锁和释放锁的。")]),t._v(" "),a("p",[a("strong",[t._v("基于setnx实现分布式锁：")])]),t._v(" "),a("p",[t._v("在Redis中定义一个string类型的值，把key的值作为锁的名字，Redis的string类型的setnx方法只有当键值对不存在的时候才可以被创建，如果当前设置的键值对已经存在，就会创建失败。也就是说使用setnx方法，一个键值对只能被创建一次。")]),t._v(" "),a("p",[t._v("我们可以使用setnx是否成功作为标记来表示是否加锁成功")]),t._v(" "),a("p",[t._v("(1) 如果使用setnx加锁成功，就说明还没有线程占用共享资源，我就加了一个标记，表示我已经占用了。")]),t._v(" "),a("p",[t._v("(2) 如果使用setnx加锁失败，就说明已经有线程占用了共享资源。")]),t._v(" "),a("p",[t._v("举例：上厕所。")]),t._v(" "),a("p",[t._v('我们去上厕所就相当于占用共享资源，当我们占用厕所时，会把门关上，门外面会有标志显示"有人"，关锁就相当于使用setnx，这个过程就相当于我们使用setnx做了一个标记，当有第二个人想来使用这个厕所时，看到门锁标志为"有人"，就会等待。')]),t._v(" "),a("h3",{attrs:{id:"项目中实际用到-redis-分布式锁的地方-怎么用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目中实际用到-redis-分布式锁的地方-怎么用"}},[t._v("#")]),t._v(" 项目中实际用到 Redis 分布式锁的地方?怎么用?")]),t._v(" "),a("p",[t._v("在我的项目中，使用分布式锁解决缓存击穿问题。")]),t._v(" "),a("p",[a("strong",[t._v("缓存击穿")]),t._v("：指当缓存中某个key过期了，在该热点数据重新载入缓存之前，有大量的查询请求穿过缓存，直接查询数据库。这样就会导致数据库压力瞬时剧增，造成大量请求阻塞，甚至直接挂掉。")]),t._v(" "),a("p",[t._v("解决方法：使用Redis提供的分布式锁，保证同一时刻只能有一个查询请求加载热点数据到缓存中，这样，其他的线程只需要等待该线程运行完毕，即可重新从redis中获取数据。")]),t._v(" "),a("h3",{attrs:{id:"nacos的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nacos的使用"}},[t._v("#")]),t._v(" Nacos的使用?")]),t._v(" "),a("p",[t._v("① 介绍Nacos")]),t._v(" "),a("p",[t._v("② 使用")]),t._v(" "),a("h3",{attrs:{id:"数据库索引这块的理解-面式官说现在很少用数据和索引在一起的索引结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库索引这块的理解-面式官说现在很少用数据和索引在一起的索引结构"}},[t._v("#")]),t._v(" 数据库索引这块的理解? (面式官说现在很少用数据和索引在一起的索引结构)")]),t._v(" "),a("h3",{attrs:{id:"建索引怎么考虑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#建索引怎么考虑"}},[t._v("#")]),t._v(" 建索引怎么考虑?")]),t._v(" "),a("ul",[a("li",[t._v("查询的频率：针对经常被查询的字段，可以提高查询的性能。")]),t._v(" "),a("li",[t._v("数据的唯一性：")]),t._v(" "),a("li",[t._v("数据量和字段长度：数据量大或字段长的表，建立索引可能会增加存储空间和维护成本，需要综合考虑。")]),t._v(" "),a("li",[t._v("更新频率：")])]),t._v(" "),a("h3",{attrs:{id:"前端项目有了解过吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端项目有了解过吗"}},[t._v("#")]),t._v(" 前端项目有了解过吗?")]),t._v(" "),a("h3",{attrs:{id:"给一个原型能够设计出相应的接口吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#给一个原型能够设计出相应的接口吗"}},[t._v("#")]),t._v(" 给一个原型能够设计出相应的接口吗?")]),t._v(" "),a("h3",{attrs:{id:"redis的有计算过-redis-的开销吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis的有计算过-redis-的开销吗"}},[t._v("#")]),t._v(" redis的有计算过 redis 的开销吗?")]),t._v(" "),a("h3",{attrs:{id:"并发的了解-锁的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发的了解-锁的理解"}},[t._v("#")]),t._v(" 并发的了解?锁的理解?")]),t._v(" "),a("h3",{attrs:{id:"linux的基本操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux的基本操作"}},[t._v("#")]),t._v(" linux的基本操作?")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("命令")]),t._v(" "),a("th",[t._v("操作")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("mkdir dir")]),t._v(" "),a("td",[t._v("创建目录")])]),t._v(" "),a("tr",[a("td",[t._v("rmdir dir 删除空目录 rm -rf")]),t._v(" "),a("td",[t._v("删除目录")])]),t._v(" "),a("tr",[a("td",[t._v("rm -f:强制删除 -r:递归删除 -i:互动模式")]),t._v(" "),a("td",[t._v("移除文件或目录")])]),t._v(" "),a("tr",[a("td",[t._v("cp source destination")]),t._v(" "),a("td",[t._v("复制文件或目录")])]),t._v(" "),a("tr",[a("td",[t._v("mv source destination")]),t._v(" "),a("td",[t._v("移动文件与目录，或修改文件与目录的名字")])]),t._v(" "),a("tr",[a("td",[t._v("chmod 777 filename")]),t._v(" "),a("td",[t._v("修改目录、文件访问权限")])])])]),t._v(" "),a("p",[t._v("chmod 777 filename解释")]),t._v(" "),a("p",[t._v("777：对应三组三位二进制数，")]),t._v(" "),a("p",[t._v("这三组分别对应文件所有者、文件所有者同组其他用户、文件其他组用户对该文件所具有的权限。而每一组的权限由三位二进制数表示，分别表示读、写、执行权限，对应位为1就说明有该权限。然后每组的权限有一位十进制数表示。")]),t._v(" "),a("h3",{attrs:{id:"发布项目有参与过嘛"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#发布项目有参与过嘛"}},[t._v("#")]),t._v(" 发布项目有参与过嘛?")]),t._v(" "),a("h3",{attrs:{id:"数据库中哪个数据表的行数最多"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库中哪个数据表的行数最多"}},[t._v("#")]),t._v(" 数据库中哪个数据表的行数最多")]),t._v(" "),a("h2",{attrs:{id:"_4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4"}},[t._v("#")]),t._v(" 4.")]),t._v(" "),a("p",[a("img",{attrs:{src:s(428),alt:"image-20231109193547119"}})]),t._v(" "),a("h3",{attrs:{id:"多线程juc包下的工具类有了解哪些-以及其应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多线程juc包下的工具类有了解哪些-以及其应用场景"}},[t._v("#")]),t._v(" 多线程JUC包下的工具类有了解哪些，以及其应用场景?")]),t._v(" "),a("p",[t._v("多线程 JUC 包下的工具类有：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("CountDownLatch")]),t._v("：用于等待一个或多个线程完成一组操作，常用于主线程等待其他线程执行完毕再继续执行。")]),t._v(" "),a("li",[a("code",[t._v("CyclicBarrier")]),t._v("：用于让一组线程相互等待，直到所有线程都达到某个屏障点，然后继续执行。")]),t._v(" "),a("li",[a("code",[t._v("Semaphore")]),t._v("：用于控制同时访问某个资源的线程数量。")]),t._v(" "),a("li",[a("code",[t._v("Exchanger")]),t._v("：用于两个线程之间交换数据。")]),t._v(" "),a("li",[a("code",[t._v("Lock")]),t._v(" 接口及其实现类：用于替代 synchronized 关键字，提供更灵活的锁定机制。")]),t._v(" "),a("li",[a("code",[t._v("Condition")]),t._v(" 接口：用于实现线程间的等待/通知机制，可以在不同的条件下唤醒等待的线程。")])]),t._v(" "),a("p",[t._v("这些工具类在多线程编程中提供了不同的同步和并发控制机制，适用于不同的场景和需求。")]),t._v(" "),a("h3",{attrs:{id:"spring-里面哪些功能对应哪些设计模式的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-里面哪些功能对应哪些设计模式的实现"}},[t._v("#")]),t._v(" Spring 里面哪些功能对应哪些设计模式的实现?")]),t._v(" "),a("p",[t._v("Spring 框架中的一些功能对应的设计模式实现如下：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("单例模式")]),t._v("：Spring 容器中管理的 Bean 默认为单例模式，确保每个 Bean 在容器中只有一个实例。")]),t._v(" "),a("li",[a("strong",[t._v("工厂模式")]),t._v("：Spring 使用工厂模式创建和管理 Bean，通过配置文件或注解来指定 Bean 的创建方式。")]),t._v(" "),a("li",[a("strong",[t._v("代理模式")]),t._v("：Spring AOP（面向切面编程）功能使用动态代理实现，可以在不修改原有代码的情况下，增加额外的功能。")]),t._v(" "),a("li",[a("strong",[t._v("模板方法模式")]),t._v("：Spring 的 JdbcTemplate 是一个典型的模板方法模式的应用，将数据库访问的公共操作封装在模板方法中，具体的实现由子类完成。")]),t._v(" "),a("li",[a("strong",[t._v("观察者模式")]),t._v("：Spring 的事件驱动模型使用观察者模式，通过事件监听器和事件发布者实现组件之间的解耦和消息通知。")])]),t._v(" "),a("p",[t._v("这些是 Spring 框架中一些常见功能对应的设计模式实现，通过使用设计模式可以提高代码的可维护性、可扩展性和灵活性。")]),t._v(" "),a("h3",{attrs:{id:"spring事务怎么使用-事务注解使用过程中出现过什么问题-事务什么时候会失效-注解上面有些什么属性配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring事务怎么使用-事务注解使用过程中出现过什么问题-事务什么时候会失效-注解上面有些什么属性配置"}},[t._v("#")]),t._v(" Spring事务怎么使用，事务注解使用过程中出现过什么问题，事务什么时候会失效，注解上面有些什么属性配置")]),t._v(" "),a("p",[t._v("在 Spring 中使用事务，可以通过以下步骤进行配置和使用：")]),t._v(" "),a("ul",[a("li",[t._v("配置数据源：在 Spring 配置文件中配置数据源，如连接数据库的配置。")]),t._v(" "),a("li",[t._v("配置事务管理器：在 Spring 配置文件中配置事务管理器，例如使用 "),a("code",[t._v("DataSourceTransactionManager")]),t._v("。")]),t._v(" "),a("li",[t._v("声明事务：在需要事务管理的方法上添加事务注解，如 "),a("code",[t._v("@Transactional")]),t._v("。")]),t._v(" "),a("li",[t._v("处理事务：在方法执行过程中，如果发生异常或满足某些条件，事务将被回滚；否则，事务将被提交。")])]),t._v(" "),a("p",[t._v("事务注解 "),a("code",[t._v("@Transactional")]),t._v(" 可以配置以下属性：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("propagation")]),t._v("：定义事务的传播行为。")]),t._v(" "),a("li",[a("code",[t._v("isolation")]),t._v("：定义事务的隔离级别。")]),t._v(" "),a("li",[a("code",[t._v("timeout")]),t._v("：定义事务超时时间。")]),t._v(" "),a("li",[a("code",[t._v("readOnly")]),t._v("：定义事务是否只读。")]),t._v(" "),a("li",[a("code",[t._v("rollbackFor")]),t._v("：定义触发事务回滚的异常类型。")]),t._v(" "),a("li",[a("code",[t._v("noRollbackFor")]),t._v("：定义不触发事务回滚的异常类型。")])]),t._v(" "),a("p",[t._v("其中，事务的失效可能出现在未正确配置事务管理器、事务注解应用不正确、方法没有被 Spring 托管等情况下。")]),t._v(" "),a("h3",{attrs:{id:"spring注解的自动装配机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring注解的自动装配机制"}},[t._v("#")]),t._v(" Spring注解的自动装配机制")]),t._v(" "),a("p",[t._v("Spring 的注解自动装配机制通过注解来实现 Bean 的自动装配，常用的注解有：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("@Autowired")]),t._v("：自动装配 Bean，可以用于构造方法、成员变量、Setter 方法和普通方法上。")]),t._v(" "),a("li",[a("code",[t._v("@Qualifier")]),t._v("：与 "),a("code",[t._v("@Autowired")]),t._v(" 搭配使用，指定具体要注入的 Bean 的名称。")]),t._v(" "),a("li",[a("code",[t._v("@Resource")]),t._v("：类似于 "),a("code",[t._v("@Autowired")]),t._v("，但更加通用，可以根据名称或类型进行自动装配。")]),t._v(" "),a("li",[a("code",[t._v("@ComponentScan")]),t._v("：指定要扫描的包路径，自动进行组件扫描，并将带有特定注解（如 "),a("code",[t._v("@Component")]),t._v("、"),a("code",[t._v("@Service")]),t._v("、"),a("code",[t._v("@Repository")]),t._v("）的类注册为 Bean。")]),t._v(" "),a("li",[a("code",[t._v("@Component")]),t._v("：通用的组件注解，用于标识一个类为组件。")]),t._v(" "),a("li",[a("code",[t._v("@Service")]),t._v("：用于标识一个类为服务层组件。")]),t._v(" "),a("li",[a("code",[t._v("@Repository")]),t._v("：用于标识一个类为数据访问层组件（DAO）。")]),t._v(" "),a("li",[a("code",[t._v("@Controller")]),t._v("：用于标识一个类为控制器组件（用于 MVC 架构）。")])]),t._v(" "),a("p",[t._v("通过使用这些注解，Spring 可以根据类的注解信息进行自动装配，将符合条件的 Bean 注入到需要的地方。")]),t._v(" "),a("h3",{attrs:{id:"数据库的索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库的索引"}},[t._v("#")]),t._v(" 数据库的索引")]),t._v(" "),a("p",[t._v("数据库的索引是一种用于提高数据库查询性能的数据结构。索引可以加快数据检索的速度，减少数据库的IO操作。常见的数据库索引包括：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("B-树索引")]),t._v("：是一种平衡多路搜索树，常用于传统关系型数据库。B-树索引适用于范围查询，支持高效的插入和删除操作。")]),t._v(" "),a("li",[a("strong",[t._v("B+树索引")]),t._v("：是一种基于 B-树的改进版本，常用于现代关系型数据库。B+树索引将叶节点链接成一个有序链表，适用于范围查询和排序查询。")]),t._v(" "),a("li",[a("strong",[t._v("哈希索引")]),t._v("：基于哈希表实现，适用于等值查询，但不支持范围查询。")]),t._v(" "),a("li",[a("strong",[t._v("全文索引")]),t._v("：用于全文搜索，可以对文本内容进行高效的关键字搜索。")])]),t._v(" "),a("p",[t._v("选择适当的索引类型取决于具体的查询需求和数据特点。")]),t._v(" "),a("h3",{attrs:{id:"sql调优-执行计划"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql调优-执行计划"}},[t._v("#")]),t._v(" sql调优，执行计划")]),t._v(" "),a("p",[t._v("SQL 调优是通过优化 SQL 查询语句和数据库结构来提高数据库查询性能的过程。以下是一些常见的 SQL 调优技巧和工具：")]),t._v(" "),a("ul",[a("li",[t._v("使用索引：为频繁查询的列创建索引，可以加快查询速度。")]),t._v(" "),a("li",[t._v("避免全表扫描：尽量使用索引或优化查询语句，避免全表扫描的开销。")]),t._v(" "),a("li",[t._v("优化查询语句：避免使用不必要的连接和子查询，尽量简化查询逻辑。")]),t._v(" "),a("li",[t._v("分析执行计划：使用数据库管理工具或 "),a("code",[t._v("EXPLAIN")]),t._v(" 命令分析查询的执行计划，找出潜在的性能问题。")]),t._v(" "),a("li",[t._v("缓存查询结果：对于频繁查询但不经常变化的数据，可以考虑使用缓存来避免重复查询数据库。")])]),t._v(" "),a("h3",{attrs:{id:"redis集群的搭建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis集群的搭建"}},[t._v("#")]),t._v(" redis集群的搭建")]),t._v(" "),a("p",[t._v("Redis 集群的搭建可以通过以下步骤实现：")]),t._v(" "),a("ul",[a("li",[t._v("安装和配置多个 Redis 节点：在不同的机器上安装 Redis，并通过修改配置文件使其成为集群的一部分。")]),t._v(" "),a("li",[t._v("创建集群：使用 "),a("code",[t._v("redis-trib.rb")]),t._v(" 脚本创建 Redis 集群，并指定各个节点的 IP 和端口号。")]),t._v(" "),a("li",[t._v("启动集群：启动集群中的各个节点，使其开始运行。")]),t._v(" "),a("li",[t._v("验证集群状态：使用 "),a("code",[t._v("redis-cli")]),t._v(" 连接到集群，并执行 "),a("code",[t._v("cluster info")]),t._v(" 命令来验证集群的状态。")])]),t._v(" "),a("p",[t._v("Redis 集群提供了数据的分片和备份机制，以实现高可用性和横向扩展。")]),t._v(" "),a("h3",{attrs:{id:"分布式锁的原理-以及使用-有没有多种方案去实现分布式锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式锁的原理-以及使用-有没有多种方案去实现分布式锁"}},[t._v("#")]),t._v(" 分布式锁的原理，以及使用，有没有多种方案去实现分布式锁")]),t._v(" "),a("ol",[a("li",[t._v("分布式锁的原理是通过在分布式环境中协调多个节点之间的访问控制，保证同一时间只有一个节点可以访问共享资源。常见的分布式锁实现包括：")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("基于数据库的锁：通过在数据库中创建唯一索引或使用悲观锁（如 "),a("code",[t._v("SELECT ... FOR UPDATE")]),t._v("）来实现分布式锁。")])]),t._v(" "),a("li",[a("p",[t._v("基于缓存的锁：利用缓存系统（如 Redis）提供的原子操作（如")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("SETNX")]),t._v(" 和 "),a("code",[t._v("EXPIRE")]),t._v("）来实现分布式锁。")]),t._v(" "),a("ul",[a("li",[t._v("基于 ZooKeeper 的锁：利用 ZooKeeper 提供的临时节点和顺序节点特性来实现分布式锁。")]),t._v(" "),a("li",[t._v("基于分布式一致性算法的锁：如基于 Paxos 或 Raft 算法实现的分布式锁。")])]),t._v(" "),a("p",[t._v("这些分布式锁实现方案在不同的场景下具有不同的优势和适用性，选择合适的方案取决于具体的需求和系统环境。")])])]),t._v(" "),a("h3",{attrs:{id:"redisson锁实现的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redisson锁实现的原理"}},[t._v("#")]),t._v(" redisson锁实现的原理")]),t._v(" "),a("h3",{attrs:{id:"分布式事务的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务的实现"}},[t._v("#")]),t._v(" 分布式事务的实现")]),t._v(" "),a("p",[t._v("分布式事务是指涉及多个数据库或服务的事务操作，需要保证多个操作的一致性和隔离性。常见的分布式事务解决方案包括：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("两阶段提交（2PC）")]),t._v("：该方案通过协调者和参与者的两个阶段来实现事务的提交和回滚。它的主要问题是协调者单点故障和阻塞的风险。")]),t._v(" "),a("li",[a("strong",[t._v("补偿事务")]),t._v("：该方案通过在参与者中实现“补偿”操作来保证事务的一致性。当事务需要回滚时，参与者执行补偿操作来撤销之前的操作。")]),t._v(" "),a("li",[a("strong",[t._v("消息队列")]),t._v("：该方案通过将事务操作转化为消息，并使用消息队列来保证事务的一致性。参与者将操作发送到消息队列中，协调者消费消息并执行事务操作。")])]),t._v(" "),a("p",[t._v("选择适当的分布式事务解决方案取决于系统的需求、性能要求和可用性要求。")]),t._v(" "),a("h3",{attrs:{id:"jwt结构以及使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jwt结构以及使用场景"}},[t._v("#")]),t._v(" JWT结构以及使用场景")]),t._v(" "),a("p",[t._v("JWT（JSON Web Token）是一种用于身份验证和授权的开放标准。它由三部分组成：头部（Header）、载荷（Payload）和签名（Signature）。JWT 的使用场景包括：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("身份验证")]),t._v("：JWT 可以用于验证用户的身份，通过在请求中添加 JWT，服务器可以验证 JWT 的有效性并识别用户。")]),t._v(" "),a("li",[a("strong",[t._v("单点登录")]),t._v("：通过在不同的系统之间共享 JWT，可以实现用户在多个系统中的单点登录。")]),t._v(" "),a("li",[a("strong",[t._v("授权")]),t._v("：JWT 可以包含用户的权限信息，可以用于授权访问受限资源。")]),t._v(" "),a("li",[a("strong",[t._v("信息交换")]),t._v("：由于 JWT 的结构简单且自包含，可以用于在不同的系统之间安全地传输信息。")])]),t._v(" "),a("p",[t._v("不适合使用 JWT 的情况包括需要实时撤销令牌、需要存储大量用户信息或需要频繁更改令牌的情况。")]),t._v(" "),a("h3",{attrs:{id:"什么情况不能使用cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么情况不能使用cookie"}},[t._v("#")]),t._v(" 什么情况不能使用cookie")]),t._v(" "),a("h3",{attrs:{id:"管道设计模式的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#管道设计模式的使用"}},[t._v("#")]),t._v(" 管道设计模式的使用")]),t._v(" "),a("p",[t._v("管道设计模式是一种行为设计模式，通过将处理对象组织成一个处理管道，使其能够按照特定的顺序依次处理请求。管道设计模式的主要目的是将复杂的处理过程分解为多个独立的处理步骤，并将它们串联起来，以便每个步骤都能够独立处理请求。")]),t._v(" "),a("p",[t._v("管道设计模式的主要组成部分包括：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("处理器（Handler）")]),t._v("：每个处理步骤都由一个处理器来执行。处理器通常定义一个处理方法，用于执行具体的处理逻辑，并将处理结果传递给下一个处理器。")]),t._v(" "),a("li",[a("strong",[t._v("管道（Pipeline）")]),t._v("：管道是处理器的有序集合，它定义了处理请求的顺序。管道通常提供添加处理器、执行处理逻辑以及传递请求的方法。")]),t._v(" "),a("li",[a("strong",[t._v("请求（Request）")]),t._v("：请求是要处理的对象。它包含了需要处理的数据以及其他相关信息。")]),t._v(" "),a("li",[a("strong",[t._v("响应（Response）")]),t._v("：响应是处理器返回的结果。它包含了处理结果以及其他相关信息。")])]),t._v(" "),a("p",[t._v("使用管道设计模式可以将复杂的处理逻辑分解为多个简单的处理步骤，每个步骤只需要关注自己的处理逻辑，可以提高代码的可读性、可维护性和可扩展性。此外，管道设计模式还可以灵活地组合和重用处理器，以满足不同的需求。")]),t._v(" "),a("h3",{attrs:{id:"pipeline的运用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pipeline的运用"}},[t._v("#")]),t._v(" Pipeline的运用")]),t._v(" "),a("h3",{attrs:{id:"归并排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#归并排序"}},[t._v("#")]),t._v(" 归并排序")]),t._v(" "),a("p",[t._v("归并排序的基本思想：")]),t._v(" "),a("ol",[a("li",[t._v("将待排序的序列不断划分为较小的子序列，直到每个子序列只包含一个元素。")]),t._v(" "),a("li",[t._v("逐步将相邻的子序列合并，直到最终得到完整的有序序列。")])]),t._v(" "),a("h5",{attrs:{id:"_5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5"}},[t._v("#")]),t._v(" 5.")]),t._v(" "),a("p",[a("img",{attrs:{src:s(429),alt:"image-20231112155734081"}})]),t._v(" "),a("h2",{attrs:{id:"_6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6"}},[t._v("#")]),t._v(" 6.")]),t._v(" "),a("p",[a("img",{attrs:{src:s(430),alt:"image-20231112155918363"}})]),t._v(" "),a("h2",{attrs:{id:"_7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7"}},[t._v("#")]),t._v(" 7.")]),t._v(" "),a("p",[a("img",{attrs:{src:s(431),alt:"image-20231112155931210"}})]),t._v(" "),a("h2",{attrs:{id:"_8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8"}},[t._v("#")]),t._v(" 8.")]),t._v(" "),a("p",[a("img",{attrs:{src:s(432),alt:"image-20231112160629568"}})]),t._v(" "),a("p",[t._v("上海中科软面试题\n1.你说你未登录也可以加入购物车是如何实现了")]),t._v(" "),a("p",[t._v("2.stringbuffer和 stringbuilder区别")]),t._v(" "),a("p",[t._v("3.线程中 callable和runnable的区别")]),t._v(" "),a("p",[t._v("4.hashtable和hashmap的区别(说hashmap底层源码和扩容机制)")]),t._v(" "),a("p",[t._v("5.你遇到一个接口很慢怎么办 (慢查询日志explain看看执行流程 索引失效? 哪几种失效方式 如何规避 真的因为数据量大 分库分表的思路")]),t._v(" "),a("h2",{attrs:{id:"_9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9"}},[t._v("#")]),t._v(" 9.")]),t._v(" "),a("p",[a("img",{attrs:{src:s(433),alt:"image-20231112160715710"}})]),t._v(" "),a("p",[t._v("11.1 浙江大成网络科技有限公司\n面试:\n1.离职原因\n2.现在是否在公司所在地?(是否能参加线下面试? )\n3.自我介绍\n4.从一个List对象里边拿到一个id集合，如何用stream流实现?\n5.详细描述一下HashMap\n6.在项目中是否有使用到HashMap?\n7.HashMap是否是线程安全的?\n8，是否了解LinkedHashMap?\n9.假如有100w条数据，想要查询到180w条数据中的最后一个，如何用sql语句实现?\n10.如何用MyBatis-Plus做多表操作?\n11.了解微服务的哪些组件?\n12.对Spring有哪些了解?\n13.AOP在项目中是否有体现?\n14.平常的日志分析能否用AOP去做呢?\n15.对过滤器和拦截器是否有了解?(Servlet)\n16.你们使用Redis缓存商品详情，如果商品多的话每个商品都缓存吗?\n你有哪些想了解的?")]),t._v(" "),a("h2",{attrs:{id:"_10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10"}},[t._v("#")]),t._v(" 10.")]),t._v(" "),a("p",[a("img",{attrs:{src:s(434),alt:"image-20231112160732976"}})]),t._v(" "),a("p",[t._v("11月10号 食亨 (上海)科技服务有限公司\n1自我介绍\n2 之前做的项目订单的表有多大\n3 项目进行了多久，项目开发的进度，开发中有哪些里程碑\n4 项目里面代码量是多少\n5 家政服务平台领域怎么划分\n6 Java的垃圾回收机制\n7 HashMap的底层原理，红黑树为什么效率高\n8 在项目中哪里用到了重写equals方法，有什么效果?9 详细谈谈AOP，做了什么，怎么做的\n10谈一谈SpringCloud\n11 计算机网络七层模型\n12 项目中遇到的最大的困难是什么\n13 有哪些自己觉得做得好的亮点")]),t._v(" "),a("h2",{attrs:{id:"_11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11"}},[t._v("#")]),t._v(" 11.")]),t._v(" "),a("p",[a("img",{attrs:{src:s(435),alt:"image-20231112160757799"}})]),t._v(" "),a("p",[t._v("43\n上海新狼信息科技中心\n(主要是根据简历上的内容问的)\n01.四表联查效率较低，怎么解决?\n02.最近项目的技术栈\n03.微服务六大组件")]),t._v(" "),a("p",[t._v("04.项目的开发团队\n05.Spring中Bean 的生命周期")]),t._v(" "),a("p",[t._v("06.Spring的循环依赖以及如何解决\n07.ArrayList HashMap 的原理\n08.get和post的区别\n09.AOP的理解及实现方式\n10.@Transactional注解 参数rollback\n11.MySal between 和 in的区别\n12.shiro 如何 实现认证与 授权")]),t._v(" "),a("h2",{attrs:{id:"_12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12"}},[t._v("#")]),t._v(" 12.")]),t._v(" "),a("p",[a("img",{attrs:{src:s(436),alt:"image-20231112160828953"}})]),t._v(" "),a("p",[t._v('11.10 深圳秦丝科技笔试\n画ER图,大概的情景是:公司有7个兴趣协会，每个协会有1到3名会长，协会不定期举办活动,每次活1动后会长指定参与人员写一篇活动总结.根据这个情景来设计数据库系统ER图2.手撕SOL\n表有:部门表dept,员工关系表emp。求每一部门中工作内容为"CLERK"的员工的最高工资，最低工资·求有哪些部门,在这些部门中薪资超过了该部门平均薪资的员工人数超过1个,按照部\n门编号排序\n3.代码题:说有一个摄影比赛,有100张照片,十个评委进行打分,得到一个二维数组grade[100][10].主要的就是一个2维数组,遍历这个二维数组，求去掉最高分最低分后每张图片的平均分.然后还要求那个评委最公正(就是求那个评委打的分与平均分差别最小)\n面试\n非技术问题:\n1.自我介绍\n2.为什么离职?\n在深圳找工作最看重那个哪个方面?3 .\n4，前公司后端开发的人数是多少?\n5.项目都是从0到1开发的吗?项目上线之后有迭代维护之类的吗?这两个项目做完之后线上的运行一些情况有了解吗?这些秒杀，搜索业务上线之后有什么反馈给开发的吗?系统线上的压力方面有了解吗?系统线上的用户有多少人，还有一些信息有知道吗?\n6，开发的过程中大家的工作节奏和加班情况是怎么样的?7，能否适应加班?有没有抗压的经历?从这段抗压经历中总结得到了什么经验?8，上一份工作的薪资情况?现在找工作的期望薪资是多少技术问题\n项目中的表结构设计有了解吗?不是你创建的表，但是有没有看过表结构,DDL语句?看过的话就你1目前来看，数据库表结构的设计创建，有哪些值得注意和关注的点?(我上面答了项目中有一些字段进行几余设计)几余了字段会不会产生什么问题?2 .\n3.讲讲数据库表结构设计的三大范式\n4。按照你的理解，三大范式提出的目的是什么?满足了上面的范式之后能带来什么好处有想过吗?\n在建表的时候主键id使用的什么类型?5.\n用int类型上限是多少，这个值最大能是多大的数值?6\n7，新插入的主键值是怎么产生的?\n使用自增的话会有什么问题吗?怎么解决?0\n之前有创建过哪些索引?具体能举一些例子吗?10，什么场景下面用到了联合索引?那个表,将那些字段设置为联合索引?在什么样的业务场景下用到这个联合索引?\n最左匹配原则有了解吗?11.\n12.索引的数据结构是怎么样的?为什么B+树为什么会比B树更适合进行范围查询?')]),t._v(" "),a("ol",{attrs:{start:"13"}},[a("li",[a("p",[t._v("有看过一条SQL语句的执行计划吗?可以看到哪些信息?")])]),t._v(" "),a("li",[a("p",[t._v("回表是什么意思?怎么解决回表?")])]),t._v(" "),a("li",[a("p",[t._v("15.执行计划中有一个字段叫key_len是什么意思,有什么作用?一般从里面能看到哪些信息?")])]),t._v(" "),a("li",[a("p",[t._v("16.事务的特性，隔离级别.")])]),t._v(" "),a("li",[a("p",[t._v("17，事务的传播行为.")])]),t._v(" "),a("li",[a("p",[t._v("18.MYSOL默认的隔离级别是什么?如果将隔离级别改为读已提交,会产生什么问题?如果将你们项目中的数据库的隔离级别改为读已提交你觉得会不会有什么问题，哪些业务功能会有什么问题?")])]),t._v(" "),a("li",[a("p",[t._v("19.单点登录这块是怎么做实现的?")])]),t._v(" "),a("li",[a("p",[t._v("拿到Redis里面的信息之后会校验里面的什么信息吗?会做其他的操作吗?")])]),t._v(" "),a("li",[a("p",[t._v("你们的Redis里面的共享会话的信息有设置过期时间吗?如果用户一直在使用，有给这个过期时间续期吗?")])]),t._v(" "),a("li",[a("p",[t._v("网关服务将请求转发到下游服务的时候这中间还会做什么吗?ribbon是怎么知道下游服务的地址的?ribbon是需要对每一个请求都去注册中心拉去服务列表吗?")])]),t._v(" "),a("li",[a("p",[t._v("秒杀服务如何解决库存超卖的问题的?")])]),t._v(" "),a("li",[a("p",[t._v("seata分布式事务的AT模式是怎么实现的?怎么实现事务的一致性的?")])]),t._v(" "),a("li",[a("p",[t._v("每个RM端的本地事务会提交吗?怎么实现回滚的呢?")])]),t._v(" "),a("li",[a("p",[t._v("前置镜像存在什么地方?UNDO_LOG表中存的是什么内容?")])])]),t._v(" "),a("h2",{attrs:{id:"_13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13"}},[t._v("#")]),t._v(" 13.")]),t._v(" "),a("p",[a("img",{attrs:{src:s(437),alt:"image-20231112160923202"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(438),alt:"image-20231112160945689"}})]),t._v(" "),a("p",[t._v("武汉大玩家\n11月10日下午5:26708字\n笔试:1.什么是单例模式，写一段单例模式的伪代码\n2.写一个sql语句删除学生表中的重复数据 (字段:自增主键id，姓名，年龄，学生的唯一标识sno)\n3.innerioin和left ioin的过滤条件写在on和where后有什么区别\n4.写一段伪代码，下单以后检查库存，没有库存抛出异常要求只发货一次并且只支付一次\n5.编写一段伪代码，(高性能]实现用户登录逻辑。用户登录需验证用户密码是否正确，记录登录日志，更新登录次数，最后发送登录成功消息。\n6.采用微服务架构开发的系统上线后，用户通过浏览器访问系统功能(日志查询)，页面响应非常缓慢，请说出你[全面]分析问题和解决问题的方法\n7.你了解哪些消中间件?写出他们各自的特点\n8.你对你未来两年的职业规划与发展")]),t._v(" "),a("p",[t._v("面试:")]),t._v(" "),a("p",[t._v("1.自我介绍\n2.项目中遇到的更有挑战性的问题 (让你说点高级问题)\n3，写分页查询的sql语句时要注意什么问题? (不是orm架的使用，如果查很多页，1000w条数据该怎么写)\n4.说笔试第二题去重的思路\n5.sgl里左右内链接的区别，你使用的时候怎么判断过滤条件放where还是on，有什么不同的效果，放on后面的条件会使用索引吗，使用过哪些聚合函数?\n6.sql分组查询时，查询出的字段能否超过分组的字段\n7.做一个查询系统，它的界面响应非常慢，你怎么分析和解决这个问题\n8.如果你已经发现是数据库的查询比较慢，你怎么分析和解决，你觉得应该怎么写出一条性能高的sal: 有一条现成的sql摆在那就是查询慢，你怎么分析它哪里出了问题\n9.一个表查询时能走多个索引吗\n10.一个10w的表和一个1000w的表链接，谁ioin谁\n11.sql语句怎么把一张表的行转列，列转行\n12.mysql事务隔离级别以及对应出现的问题，并且举个例子\n去阐述它们\n13.数组和链表你分别会在什么场景去使用他们\n14.你怎么理解微服务的，微服务的优缺点。")])])}),[],!1,null,null,null);a.default=e.exports}}]);