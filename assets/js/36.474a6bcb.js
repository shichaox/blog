(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{460:function(t,a,s){"use strict";s.r(a);var e=s(14),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[t._v("#")]),t._v(" Map")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}}),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("父类接口")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("底层结构")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("扩容机制")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("存储是否有序")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("存储是否允许重复")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("是否允许存储null")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Map")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("部分有序")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("不能(指的是key不能重复)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("部分允许")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("HashMap")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Map")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("数组+链表+红黑树")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("默认长度是16，扩容机制2倍")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("无序")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("不允许")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("允许")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("LinkedHashMap")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("HashMap")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("完全复用了父类的结构、方法， 在父类的基础上维护了一个双向链表")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("有序")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("不允许")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("允许")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("HashTable")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Map")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("数组+链表")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("数组长度默认是11，默认扩容机制是2倍+1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("无序")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("不允许")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("不允许存储null作为Key和value")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("TreeMap")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Map")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("红黑树")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("存储数据大小有序")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("不允许")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("不允许")])])])]),t._v(" "),a("h2",{attrs:{id:"什么是map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是map"}},[t._v("#")]),t._v(" 什么是Map")]),t._v(" "),a("p",[t._v("Map就是用来存储键值对的接口，Collection存储的是单列的数据，Map存储的是键值对(key-value)，key和value成对存储，可以通过key值查找对应的value。在Map中，key不允许重复。")]),t._v(" "),a("h2",{attrs:{id:"api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[t._v("#")]),t._v(" API")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//新增、删除、查找")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("添加键值对，如果键值对存在，就是更新键值对\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("putAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：将一个map的所有键值对都放入这个map\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：根据一个key获取value，如果key不存在就返回"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：删除map中key对应的键值对\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("containsKey")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：判断map中是否包含这个key\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("containsValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：判断map中是否包含这个value\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("clear")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：清空map\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：判断两个map是否相等\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" hashCode：返回此映射的哈希码值\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isEmpty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：判断map中是否为空\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：返回map的大小，键值对个数\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Entry")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("entrySet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：返回此映射中包含映射关系的"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),t._v("视图\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("keySet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：返回此映射中包含的键的"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("values")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：返回此映射中值的"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),t._v("\n")])])]),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}}),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Map")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("HashMap")]),t._v(" "),a("th",[t._v("LinkedHashMap")]),t._v(" "),a("th",[t._v("HashTable")]),t._v(" "),a("th",[t._v("TreeMap")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}})])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("新增")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("V put(K key, V value)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td",[t._v("Map.Entry<K, V> ceilingEntry(K key)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("大于等于给定key的最小键值对")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("void putAll(Map<? extends K, ? extends V> m)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td",[t._v("K ceilingKey(K key)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("大于等于给定key的最小key")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("删除")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("V remove(key)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td",[t._v("Map.Entry<K, V> floorEntry(K key)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("小于等于key的最大键值对")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("查找")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("V get(key)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td",[t._v("Map.Entry(K, V> higherEntry(K key)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("大于给定key的最小键值对")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("containsKey(key)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td",[t._v("Map.Entry<K, V> lowerEntry<K key")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("小于key的最大键值对")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("containsValue(value)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td",[t._v("K lowerKey(K key)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("void clear()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td",[t._v("Map.Entry<K, V> firstEntry()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean isEmpty()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td",[t._v("Map.Entry<K, V> lastEntry()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("int size()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td",[t._v("Map.Entry<K, V> poolFirstEntry()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("删除最小的键值对")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Set<Map, Entry<K, V>> entrySet()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td",[t._v("Map.Entry<K, V> pollLastEntry()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("删除最大的键值对")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Set"),a("K",[t._v(" keySet()")])],1),t._v(" "),a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Collection"),a("V",[t._v(" values")])],1),t._v(" "),a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td",{staticStyle:{"text-align":"center"}})])])]),t._v(" "),a("h2",{attrs:{id:"hashmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap"}},[t._v("#")]),t._v(" HashMap")]),t._v(" "),a("h3",{attrs:{id:"什么是hash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是hash"}},[t._v("#")]),t._v(" 什么是hash")]),t._v(" "),a("p",[t._v("就是把固定或"),a("strong",[t._v("任意长度")]),t._v("的输入（hashCode，hash），通过散列算法变换成"),a("strong",[t._v("固定长度的输出")]),t._v("（数组下标），该输出就是散列值。一个输入对应一个输出，多个输入可能对应一个输出（hash冲突）。")]),t._v(" "),a("h3",{attrs:{id:"初始化容量及扩容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化容量及扩容"}},[t._v("#")]),t._v(" 初始化容量及扩容")]),t._v(" "),a("p",[t._v("HashMap的底层数组的初始容量是16，扩容机制是2倍。")]),t._v(" "),a("h3",{attrs:{id:"加载因子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加载因子"}},[t._v("#")]),t._v(" 加载因子")]),t._v(" "),a("p",[t._v("在HashMap底层维护了一个加载因子，用来表示存储到多少就扩容。")]),t._v(" "),a("p",[t._v("默认数组长度16，默认加载因子是0.75f，阈值 = 16 * 0.75 = 12。当HashMap存储的键值对数量超过阈值，就会触发数组扩容。")]),t._v(" "),a("h3",{attrs:{id:"hashmap底层数组结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap底层数组结构"}},[t._v("#")]),t._v(" HashMap底层数组结构")]),t._v(" "),a("p",[t._v("HashMap的底层结构是数组+链表+红黑树")]),t._v(" "),a("p",[t._v("HashMap数组底层存储的key-value是以Node结点存储的。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" hash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transient")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"hash的计算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hash的计算"}},[t._v("#")]),t._v(" hash的计算")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" h"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hashCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("为什么")]),t._v(" "),a("p",[t._v("hashCode ^ (hashCode右移16位)")]),t._v(" "),a("p",[a("strong",[t._v("因为计算键值对在数组中存储地址（索引）的方式是hashcode & (length - 1)")])]),t._v(" "),a("p",[a("strong",[t._v("其中length为底层数组长度，上述操作相当于hashCode % length, （因为length都是2的倍数，length = 2^n)")]),t._v("\n$$\nlength - 1 = 2^n - 1\n$$\n那么上述操作就相当于保留hashCode的低n位，如果直接用hashCode计算索引的位置的话，hashCode的高位数据就会丢失，就会导致很多hash值不同，而低位没有区别的数计算出来的数组索引是一样的，从而导致很多数据发生冲突。为了避免这种情况，hashMap将高16位与低16位进行异或操作，再用计算出的结果对数组长度取余（和数组长度 - 1 &操作）得到索引，这样就可以保证高位的数据也可以参与到&运算中来，以增加索引的散列程度让数据分布的更加均匀。")]),t._v(" "),a("h3",{attrs:{id:"hashcode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashcode"}},[t._v("#")]),t._v(" hashCode")]),t._v(" "),a("p",[t._v("是根据对象的某些信息推导出来的int类型的值，默认情况下是对象的存储地址，主要用于在散列存储结构中确定元素的存储地址，例如HashMap、HashTable。")]),t._v(" "),a("h3",{attrs:{id:"a-b-a-b-1-在什么情况下会成立"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-b-a-b-1-在什么情况下会成立"}},[t._v("#")]),t._v(" a % b = a & (b - 1)在什么情况下会成立")]),t._v(" "),a("p",[t._v("只有在b 等于2的幂时才会成立\n$$\nb = 2 ^ n\n$$\n也就是说，b的第n + 1位为1，低n位都为0。将a拆成两部分的和，一部分是低n位，另一部分是剩下的高位部分，高位的部分一定会被b整除，所以取余剩下来的就是低n位，a低n位就是取余后的结果，既然如此，保留b的低n位就是取余后的结果，而a和n个1相&就可以保留低n位。")]),t._v(" "),a("h3",{attrs:{id:"hashmap对key重复的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap对key重复的定义"}},[t._v("#")]),t._v(" HashMap对key重复的定义")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" hash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("hashmap中对重复的定义"),a("code",[t._v("(p.hash == hash && ((k = p.key) == key || (key != null && key.equals(k))))")]),t._v("为什么要求hash相同？")]),t._v(" "),a("ol",[a("li",[t._v("元素相同，hash一定相同。（同一元素的hashCode一定相同，hash也必然相同）")]),t._v(" "),a("li",[t._v("hash相同，元素不一定相同。（不同的元素可能会发生hash冲突，hash相同）")])]),t._v(" "),a("p",[t._v("综上所述，hash相同是元素相同的前提，必要条件，只有hash相同才会有可能元素相同。")]),t._v(" "),a("p",[a("code",[t._v("k = p.key) == key")]),t._v(" 是引用相同，也就是同一个对象。")]),t._v(" "),a("p",[a("code",[t._v("key != null && key.equals(k)")]),t._v(" 是，基于该对象的equals比较方法判断，这两个元素相同。")]),t._v(" "),a("p",[t._v("我们在使用自定义的类作为Key时，需要重写equals()方法和hashCode()方法。")]),t._v(" "),a("h3",{attrs:{id:"hashmap的添加流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap的添加流程"}},[t._v("#")]),t._v(" HashMap的添加流程")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("计算key的hash")]),t._v(" "),a("p",[a("code",[t._v("(key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16)")])])]),t._v(" "),a("li",[a("p",[t._v("使用计算得到的hash与底层数组长度n取余，得到这个键值对在数组上的位置。")]),t._v(" "),a("p",[a("code",[t._v("hash % n = hash & (n - 1)")])])]),t._v(" "),a("li",[a("p",[t._v("检查计算得到的数组位置上是否有键值对")]),t._v(" "),a("p",[t._v("(1) 如果没有元素，就直接新建结点，然后插入到数组。")]),t._v(" "),a("p",[t._v("(2) 如果数组位置有元素，就比较是否相等。")]),t._v(" "),a("p",[t._v("判断标准：")]),t._v(" "),a("p",[a("code",[t._v("p.hash == hash && ((k = p.key) == key || (key != null && key.equals(k)))")])]),t._v(" "),a("p",[t._v("​\t如果相等，就直接用新的value替代旧的value，添加结束。")]),t._v(" "),a("p",[t._v("​\t如果不相等，则继续往下比较（链表、红黑树），直到最后一个也不相等，就把他插入到末尾。")])]),t._v(" "),a("li",[a("p",[t._v("如果是链表，插入后长度超过阈值（8），则可能会转化为红黑树。")]),t._v(" "),a("p",[a("strong",[t._v("如果数组长度小于64，不会转化为红黑树，会直接扩容。")])])]),t._v(" "),a("li",[a("p",[t._v("如果插入后Map中结点数超过阈值（加载因子 * 数组长度），则会进行扩容，")])])]),t._v(" "),a("h3",{attrs:{id:"hashmap的构造方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap的构造方法"}},[t._v("#")]),t._v(" HashMap的构造方法")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//无参构造")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//指定初始容量、默认加载因子")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" initialCapacity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//指定初始容量、加载因子")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" initialCapacity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" loadFactor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   \n")])])]),a("h3",{attrs:{id:"扩容后位置的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩容后位置的问题"}},[t._v("#")]),t._v(" 扩容后位置的问题")]),t._v(" "),a("p",[t._v("原位置：hash % 16 = x")]),t._v(" "),a("p",[t._v("新位置：hash % 32 = (x + 16 * n) 等于x或x + 16")]),t._v(" "),a("p",[t._v("元素在新数组的位置，等于原位置或原位置 + 旧数组长度")]),t._v(" "),a("h3",{attrs:{id:"链表转化为红黑树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表转化为红黑树"}},[t._v("#")]),t._v(" 链表转化为红黑树")]),t._v(" "),a("p",[t._v("当某个数组位置链表长度超过8的时候，就要由链表转换成红黑树。")]),t._v(" "),a("p",[t._v("当链表长度超过8时一定会转化成红黑树吗？为什么？")]),t._v(" "),a("h3",{attrs:{id:"红黑树转化为链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#红黑树转化为链表"}},[t._v("#")]),t._v(" 红黑树转化为链表")]),t._v(" "),a("p",[t._v("有两种情况：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("删除数据的时候，要删除的数据在红黑树上，删除数据导致红黑树上的数据减少，由红黑树转化成链表。")])]),t._v(" "),a("li",[a("p",[t._v("扩容的时候，一个红黑树再扩容后，会被拆成两部分，任意部分数据过少，都会由红黑树转化成链表。")]),t._v(" "),a("p",[t._v("红黑树拆成低位（旧位置）和高位（旧位置 + 旧数组长度）两部分，任意部分分配的数据"),a("strong",[t._v("小于等于6")]),t._v("，就要由红黑树转化成链表。")]),t._v(" "),a("p",[t._v("为什么会被拆成这两部分？参考"),a("strong",[t._v("扩容后位置的问题")])])])]),t._v(" "),a("h2",{attrs:{id:"hashtable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashtable"}},[t._v("#")]),t._v(" HashTable")]),t._v(" "),a("p",[t._v("线程安全，jdk1.0的时候出现，HashMap是jdk1.2的时候出现。HashMap的出现就是为了取代HashTable。HashMap的红黑树是在1.8才加上去的，所以在此之前两个的结构是一样的。")]),t._v(" "),a("h3",{attrs:{id:"hashmap和hashtable的相同点和不同点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap和hashtable的相同点和不同点"}},[t._v("#")]),t._v(" HashMap和HashTable的相同点和不同点")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}}),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("父类接口")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("底层结构")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("存储是否有序")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("是否允许存储重复元素")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("是否允许存储null")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("线程安全")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("HashMap")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Map")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("1.8之前 数组+链表 1.8之后数组+链表+红黑树")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("无序")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("不允许")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("允许")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("不安全")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("HashTable")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Map")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("数组+链表")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("无序")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("不允许")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("不允许")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("安全")])])])]),t._v(" "),a("p",[t._v("为什么不使用线程安全的类？")]),t._v(" "),a("h2",{attrs:{id:"treemap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treemap"}},[t._v("#")]),t._v(" TreeMap")]),t._v(" "),a("h3",{attrs:{id:"构造方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造方法"}},[t._v("#")]),t._v(" 构造方法")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//无参构造")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//给定比较器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparator")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" comparator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//构造一个与给定映射具有相同映射关系的新的树映射，该映射根据其键的自然排序进行排序")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Treemap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//构造一个与指定有序映射，具有相同映射关系和相同排序规则的新的树映射")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SortedMap")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n  \n")])])]),a("h3",{attrs:{id:"treemap的api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treemap的api"}},[t._v("#")]),t._v(" TreeMap的API")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Entry")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ceilingEntry")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("大于等于key的最小键值对\n\n")])])]),a("p",[t._v("K ceilingKey(K key): 大于等于key的最小key")]),t._v(" "),a("p",[t._v("Map.Entry<K, V> floorEntry(K key): 小于等于key的最大键值对")]),t._v(" "),a("p",[t._v("K floorKey(K key): 小于等于key的最大key")]),t._v(" "),a("h2",{attrs:{id:"linkedhashmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linkedhashmap"}},[t._v("#")]),t._v(" LinkedHashMap")]),t._v(" "),a("ol",[a("li",[t._v("LinkedHashMap是HashMap的一个子类")]),t._v(" "),a("li",[t._v("底层完全复用了父类HashMap的结构、参数、方法")]),t._v(" "),a("li",[t._v("在HashMap的基础上，额外的维护了一个双向链表，以保证迭代顺序")]),t._v(" "),a("li",[t._v("存储元素有序")]),t._v(" "),a("li",[t._v("不允许存储重复的元素")]),t._v(" "),a("li",[t._v("允许存储null")])]),t._v(" "),a("h3",{attrs:{id:"linkedhashmap的构造方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linkedhashmap的构造方法"}},[t._v("#")]),t._v(" LinkedHashMap的构造方法")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedHashMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedHashMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" initialCaapacity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedHashMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" initialCapacity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" loadFactor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedHashMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" initialCapacity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" loadFactor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" accessOrder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedHashMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"properties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#properties"}},[t._v("#")]),t._v(" Properties")]),t._v(" "),a("p",[t._v("HashTable的子类，用于处理配置文件。")]),t._v(" "),a("p",[t._v("配置文件1.properties")]),t._v(" "),a("div",{staticClass:"language-properties extra-class"},[a("pre",{pre:!0,attrs:{class:"language-properties"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("username")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("root")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("pwd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("12345")]),t._v("\n")])])]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Properties")]),t._v(" properties "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Properties")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nproperties"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileInputStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1.properties"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取配置文件中的value")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" username "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" properties"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"username"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" pwd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" properties"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pwd"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("username "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('": "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" pwd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//修改配置文件")]),t._v("\nproperties"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pwd"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"666666"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"----修改后的----"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("username "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('": "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" pwd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassLoader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSystemResource")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);