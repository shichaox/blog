(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{306:function(t,e,a){t.exports=a.p+"assets/img/image-20230802203728374.ae5991f6.png"},453:function(t,e,a){"use strict";a.r(e);var s=a(14),n=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"java的集合类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java的集合类"}},[t._v("#")]),t._v(" Java的集合类")]),t._v(" "),e("h2",{attrs:{id:"集合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#集合"}},[t._v("#")]),t._v(" 集合")]),t._v(" "),e("blockquote",[e("p",[t._v("在Java中，集合指的就是存放数据的容器，是一个载体，可以一次容纳多个对象。")])]),t._v(" "),e("p",[t._v("和数组比较像，那为什么要提供一套集合类？就是因为数组操作起来麻烦，容易出bug。集合类帮助我们把操作数组这个过程隐藏起来了，数组长度不够就扩容，删除数据的时候就挪动数据。")]),t._v(" "),e("p",[e("img",{attrs:{src:a(306),alt:"image-20230802203728374"}})]),t._v(" "),e("h2",{attrs:{id:"collection"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#collection"}},[t._v("#")]),t._v(" Collection")]),t._v(" "),e("h3",{attrs:{id:"_1-collection接口的作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-collection接口的作用"}},[t._v("#")]),t._v(" 1. Collection接口的作用")]),t._v(" "),e("h3",{attrs:{id:"_2-collection的增删查"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-collection的增删查"}},[t._v("#")]),t._v(" 2. Collection的增删查")]),t._v(" "),e("p",[t._v("增：add()、addAll()")]),t._v(" "),e("p",[t._v("删：remove()、removeAll(Collection<?> c)")]),t._v(" "),e("p",[t._v("查：contains(Object o)、containsAll(Collection<?> c)")]),t._v(" "),e("p",[t._v("取交集：retainsAll(Collection<?> c)")]),t._v(" "),e("p",[t._v("其他：clear()、equals(o)、hashCode()、isEmpty()、size()")]),t._v(" "),e("h3",{attrs:{id:"_3-collection的遍历方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-collection的遍历方法"}},[t._v("#")]),t._v(" 3. Collection的遍历方法")]),t._v(" "),e("h4",{attrs:{id:"_3-1-toarray方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-toarray方法"}},[t._v("#")]),t._v(" 3.1 toArray方法")]),t._v(" "),e("p",[t._v("将Collection转化为数组，然后通过遍历这个数组来遍历这个Collection。")]),t._v(" "),e("p",[t._v("toArray方法有两种：有参和无参")]),t._v(" "),e("p",[t._v("无参：")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("toArray")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("copyOf")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elementData"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("有参：")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//底层数组及长度")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" elementData"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" size"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("toArray")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当传入的数组长度小于集合长度，直接复制底层存储的数据")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" size"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("copyOf")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElementData")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClass")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//只要走到这一步，就说明传入的数组长度大于等于集合的长度，直接把底层的数组复制给传入的数组")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("arrayCopy")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elementData"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果传入的数组长度大于size，就把第一个空余的位置赋值null")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" size"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n            a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("size"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("有参和无参的区别：")]),t._v(" "),e("h4",{attrs:{id:"_3-2-iterator方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-iterator方法"}},[t._v("#")]),t._v(" 3.2 iterator方法")]),t._v(" "),e("p",[t._v("迭代器， 又称光标(cursor)")]),t._v(" "),e("p",[t._v("迭代器在使用的过程中，如果原有结构发生改变，就会报错(ConcurrentModificationException)，不允许使用迭代器外部的方法对迭代对象进行修改。比如删除，ArrayList"),e("String",[t._v(" list的一个元素，不能用，list.remove()，只能用iterator.remove().")])],1),t._v(" "),e("p",[t._v("迭代器的使用方法：")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" list "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterator")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" iterator "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("iterator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iterator"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasNext")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" iterator"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterator")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" listIterator "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("listIterator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iterator"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasNext")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" t "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" listIterator"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h4",{attrs:{id:"_3-3-for-each"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-for-each"}},[t._v("#")]),t._v(" 3.3 for-each")]),t._v(" "),e("p",[t._v("for-each语句的底层也是iterator")]),t._v(" "),e("h3",{attrs:{id:"_4-迭代器常见的bug"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-迭代器常见的bug"}},[t._v("#")]),t._v(" 4. 迭代器常见的bug")]),t._v(" "),e("h2",{attrs:{id:"list"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[t._v("#")]),t._v(" List")]),t._v(" "),e("h3",{attrs:{id:"常用api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用api"}},[t._v("#")]),t._v(" 常用API")]),t._v(" "),e("p",[t._v("add()、addAll()")]),t._v(" "),e("p",[t._v("remove()")]),t._v(" "),e("p",[t._v("set()")]),t._v(" "),e("p",[t._v("get()")]),t._v(" "),e("p",[t._v("indexOf()")]),t._v(" "),e("p",[t._v("lastIndexOf()")]),t._v(" "),e("p",[t._v("listIterator()")]),t._v(" "),e("p",[t._v("subList()")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}}),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("父类接口")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("底层结构")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("数据增长")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("存储是否有序")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("是否允许重复")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("是否允许存储null")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ArrayList")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("List")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("数组")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("strong",[t._v("1.5")]),t._v("?")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("有序")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("允许")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("允许")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Vector")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("List")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("数组")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2?")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("有序")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("允许")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("允许")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("LinkedList")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("List、Deque")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("链表")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}}),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("有序")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("允许")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("允许")])])])]),t._v(" "),e("ol",[e("li",[t._v("实现了哪个接口：")]),t._v(" "),e("li",[t._v("数据结构：")]),t._v(" "),e("li",[t._v("底层结构：")]),t._v(" "),e("li",[t._v("存储是否有序：")]),t._v(" "),e("li",[t._v("存储null：")]),t._v(" "),e("li",[t._v("存储重复元素：")])]),t._v(" "),e("h3",{attrs:{id:"stack"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stack"}},[t._v("#")]),t._v(" Stack")]),t._v(" "),e("p",[t._v("Stack效率很低，使用Deque来代替Statck")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Deque")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" stack "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayDeque")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("integer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h2",{attrs:{id:"queue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#queue"}},[t._v("#")]),t._v(" Queue")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th"),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("父类接口")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("数据结构")]),t._v(" "),e("th",[t._v("底层结构")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("存储是否有序")]),t._v(" "),e("th",[t._v("是否允许重复")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("是否允许存储null")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("Queue(接口)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("Collection")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("队列")]),t._v(" "),e("td"),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("有序")]),t._v(" "),e("td",[t._v("允许")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("不能")])]),t._v(" "),e("tr",[e("td",[t._v("Deque(接口)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("Queue")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("队列、栈、双端队列")]),t._v(" "),e("td"),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("有序")]),t._v(" "),e("td",[t._v("允许")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("不能存储null（LinkedList除外）")])]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("ArrayDeque(实现类)")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("Deque")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("队列、栈、双端队列")]),t._v(" "),e("td",[t._v("循环数组")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("有序")]),t._v(" "),e("td",[t._v("允许")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("不能")])]),t._v(" "),e("tr",[e("td",[t._v("BlockingQueue(接口)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}}),t._v(" "),e("td",{staticStyle:{"text-align":"center"}}),t._v(" "),e("td"),t._v(" "),e("td",{staticStyle:{"text-align":"center"}}),t._v(" "),e("td"),t._v(" "),e("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),e("tr",[e("td",[t._v("BlockingDeque(接口)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("BlockingQueue、Deque")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}}),t._v(" "),e("td"),t._v(" "),e("td",{staticStyle:{"text-align":"center"}}),t._v(" "),e("td"),t._v(" "),e("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("LinkedBlockingDeque(实现类)")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("BlockingDeque")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}}),t._v(" "),e("td"),t._v(" "),e("td",{staticStyle:{"text-align":"center"}}),t._v(" "),e("td"),t._v(" "),e("td",{staticStyle:{"text-align":"center"}})])])]),t._v(" "),e("p",[t._v("极端条件下两组API对比：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}}),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("抛出异常")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("返回特殊值")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("阻塞队列")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("阻塞超时")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("队满 插入")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("add(e)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("offer(e) 入队")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("put(e)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("offer(e, time,unit)")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("队空 移除")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("remove()")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("poll() 出队")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("take()")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("poll(time, unit)")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("检查")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("element() 获取但不移除队头")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("peek() 获取队头但是不出队")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("-")])])])]),t._v(" "),e("h3",{attrs:{id:"_1-子接口deque-双端队列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-子接口deque-双端队列"}},[t._v("#")]),t._v(" 1. 子接口Deque(双端队列)")]),t._v(" "),e("p",[t._v("Deque")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}}),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("作为双端队列")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}}),t._v(" "),e("th",{staticStyle:{"text-align":"center"}}),t._v(" "),e("th",{staticStyle:{"text-align":"center"}}),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("作为Queue")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("作为Stack")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}}),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("头")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("尾")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("插入")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("offerFirst(e)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("offerLast(e)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("addFirst(e)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("addLast(e)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("offer(e)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("push()(入栈)")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("移除")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("pollFirst()")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("pollLast()")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("removeFirst()")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("removeLast()")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("poll()")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("pop(出栈)")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("获取")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("peekFirst()")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("peekLast()")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("getFirst()")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("getLast()")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("peek()")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("-")])])])]),t._v(" "),e("p",[t._v("实现类：ArrayDeque")]),t._v(" "),e("p",[t._v("初始容量16，扩容*2")]),t._v(" "),e("h3",{attrs:{id:"_2-子接口blockingqueue-阻塞队列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-子接口blockingqueue-阻塞队列"}},[t._v("#")]),t._v(" 2. 子接口BlockingQueue(阻塞队列)")]),t._v(" "),e("p",[t._v("-> 子接口BlockingDeque -> 实现类：LinkedBlockingDeque")]),t._v(" "),e("p",[t._v("阻塞队列是一个大小有限的队列。")]),t._v(" "),e("ul",[e("li",[t._v("插入时，当队列满了，插入线程阻塞。")]),t._v(" "),e("li",[t._v("从队列中获取元素时，当队列空了，获取线程阻塞。")])]),t._v(" "),e("h2",{attrs:{id:"set"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[t._v("#")]),t._v(" Set")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}}),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("父类接口")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("数据结构")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("实现")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("存储是否有序")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("是否允许重复")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("是否允许存储null")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Set(接口)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("Collection")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("集合")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("不允许")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("TreeSet")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("Set")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}}),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("TreeMap")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("大小有序")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("不允许")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("不允许")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("HashSet")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("Set")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}}),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("HashMap")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("无序")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("不允许")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("允许")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("LinkedHashSet")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("HashSet")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}}),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("LinkedHashMap")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("有序")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("不允许")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("允许")])])])]),t._v(" "),e("h3",{attrs:{id:"_1-treeset大小比较标准"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-treeset大小比较标准"}},[t._v("#")]),t._v(" 1. TreeSet大小比较标准")]),t._v(" "),e("p",[t._v("重写比较对象的比较方法。")]),t._v(" "),e("ol",[e("li",[t._v("为比较对象对应的类实现Comparable接口，重写比较方法。")]),t._v(" "),e("li",[t._v("在TreeSet构造器中传入一个比较器。")])]),t._v(" "),e("h3",{attrs:{id:"_2-重复的判断标准"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-重复的判断标准"}},[t._v("#")]),t._v(" 2. 重复的判断标准")]),t._v(" "),e("ol",[e("li",[t._v("TreeSet: Comparable返回0")]),t._v(" "),e("li",[t._v("hashCode && equals")])])])}),[],!1,null,null,null);e.default=n.exports}}]);