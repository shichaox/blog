(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{493:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"面试准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面试准备"}},[t._v("#")]),t._v(" 面试准备")]),t._v(" "),a("h2",{attrs:{id:"自我介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自我介绍"}},[t._v("#")]),t._v(" 自我介绍")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("基本信息、爱好")])]),t._v(" "),a("li",[a("p",[t._v("工作经历")])]),t._v(" "),a("li",[a("p",[t._v("技术介绍")]),t._v(" "),a("p",[t._v("聊毕设")]),t._v(" "),a("p",[t._v("聊学习能力：语言、框架、以用促学、学以致用")]),t._v(" "),a("p",[t._v("聊项目")])])]),t._v(" "),a("p",[a("strong",[t._v("开场白")]),t._v("：开始时，先向面试官致以礼貌的问候，并简单介绍自己。例如：")]),t._v(" "),a("p",[t._v('"您好，我是[姓名]，非常荣幸有机会参加面试。"')]),t._v(" "),a("p",[a("strong",[t._v("学习背景")]),t._v("：介绍自己的教育背景和相关学习经历。包括所学专业、学校、学位等。例如：")]),t._v(" "),a("p",[t._v("我本科就读于[学校名称]，[专业名称]。在大学期间，我学习了Java编程语言，并通过相关课程和项目获得了坚实的编程基础。获奖经历。")]),t._v(" "),a("p",[a("strong",[t._v("工作经验")]),t._v("：简要介绍自己的工作经验，包括公司名称、职位和工作内容。重点突出与应聘职位相关的经验和成就。例如：")]),t._v(" "),a("p",[t._v("我有一年的Java后端开发经验，在[公司名称]担任Java开发工程师的职位。我参与了多个项目的开发和维护，负责设计和实现后端功能，并与前端团队紧密合作，确保系统的稳定性和性能优化。我在项目中成功解决了一些挑战，如优化数据库查询性能和引入缓存机制，获得了积极的反馈。")]),t._v(" "),a("p",[a("strong",[t._v("技术能力")]),t._v("：列举自己掌握的关键技术和工具，并说明在这些方面的经验和熟练程度。例如：")]),t._v(" "),a("p",[t._v("我掌握Idea、maven、git等常见的项目开发和管理工具。熟悉使用关系型数据库MySQL和非关系型数据库Redis。掌握Spring全家桶的使用，熟悉使用MyBatis-Plus提供的基本的增删改查接口和条件构造器，熟悉使用ElasticSearch实现搜索功能。")]),t._v(" "),a("p",[t._v("我能够快速地接受新的技术，可以做到“以用促学，学以致用”。")]),t._v(" "),a("p",[a("strong",[t._v("项目经验")]),t._v("：提及参与过的具体项目，并简要介绍自己在项目中承担的角色和所取得的成就。例如：")]),t._v(" "),a("p",[t._v("最近的一个项目是[项目名称]，我们团队负责开发一个电子商务平台。我在项目中负责设计和实现用户管理和订单处理模块，通过使用Spring框架和数据库优化技术，成功提高了系统的性能和响应速度。这个项目得到了客户的高度评价，并在上线后取得了良好的用户反馈。")]),t._v(" "),a("p",[a("strong",[t._v("总结与展望")]),t._v("：简要总结自己的优势和对未来的期望，并表达对公司的兴趣和动机。例如：")]),t._v(" "),a("p",[t._v("总的来说，我对Java后端开发充满热情，并持续学习和探索新技术。我希望能够加入贵公司，与优秀的团队合作，共同推动产品的发展和创新。我相信我的技术能力和团队合作能力能够为公司带来价值。")]),t._v(" "),a("p",[a("strong",[t._v("结尾")]),t._v("：感谢面试官的时间和考虑，并表达期待进一步交流的意愿。例如：")]),t._v(" "),a("p",[t._v("非常感谢您给我这次面试的机会，我非常期待进一步的交流。谢谢！")]),t._v(" "),a("h2",{attrs:{id:"技术总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#技术总结"}},[t._v("#")]),t._v(" 技术总结")]),t._v(" "),a("h3",{attrs:{id:"_1-se"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-se"}},[t._v("#")]),t._v(" 1. SE")]),t._v(" "),a("p",[t._v("面向对象编程思想、IO 流、多线程、注解反射、Stream 流、Lambda 表达式。")]),t._v(" "),a("p",[a("strong",[t._v("面对对象")]),t._v("：")]),t._v(" "),a("p",[a("strong",[t._v("封装")]),t._v("：封装可以被认为是一种保护屏障，防止类的代码和数据被外部类定义的代码随机访问。")]),t._v(" "),a("p",[t._v("实现封装的步骤：")]),t._v(" "),a("ul",[a("li",[t._v("修改属性的可见性来限制对属性的访问(一般限制为private)")]),t._v(" "),a("li",[t._v("对每个属性提供对外的公共方法访问，也就是创建一对赋取值的方法，用于对私有属性的访问(get/set方法)")])]),t._v(" "),a("p",[a("strong",[t._v("继承")]),t._v("：一个类可以继承另一个类，子类可以继承父类的属性和方法，并可以在此基础上进行扩展和修改。这样，多个类重复使用到的代码(属性和方法)就可以抽取成一个父类，然后这些类继承这个父类。提高了开发效率，减少了维护成本。")]),t._v(" "),a("p",[a("strong",[t._v("多态")]),t._v("：同一个行为具有多个不同的表现形式或形态的能力。多态就是同一个接口，使用不同的实例而执行不同的操作。也就是说，每一个实例对应的子类对父类同一个方法重写的结果都不一样。")]),t._v(" "),a("p",[t._v("举例：彩色打印机和黑白打印机，他们都实现了打印机这个接口，当他们打印同一张彩色照片的时候，他们分别打印出彩色照片和黑白照片。")]),t._v(" "),a("p",[t._v("多态存在的三个必要条件")]),t._v(" "),a("ul",[a("li",[t._v("继承")]),t._v(" "),a("li",[t._v("重写")]),t._v(" "),a("li",[t._v("父类引用指向子类对象")])]),t._v(" "),a("p",[t._v("多态的优点：")]),t._v(" "),a("ul",[a("li",[t._v("消除类型之间的耦合")]),t._v(" "),a("li",[t._v("可替换性")]),t._v(" "),a("li",[t._v("可扩充性")]),t._v(" "),a("li",[t._v("接口性")]),t._v(" "),a("li",[t._v("灵活性")]),t._v(" "),a("li",[t._v("简化性")])]),t._v(" "),a("p",[a("strong",[t._v("IO流")])]),t._v(" "),a("p",[t._v("常用的输入输出流是")]),t._v(" "),a("p",[t._v("字节流：FileOutputStream、FileInputStream")]),t._v(" "),a("p",[t._v("字符流：FileWriter、FileReader")]),t._v(" "),a("p",[t._v("字符流是基于字节流的封装是包装流，是专门用来处理文本数据的。字符流是在普通字节流的基础上，在内部"),a("strong",[t._v("封装")]),t._v("了一个可以"),a("strong",[t._v("用来编解码的缓冲区")]),t._v("(字符流=字节流+编码表)。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("类型")]),t._v(" "),a("th",[t._v("字节输出流")]),t._v(" "),a("th",[t._v("字节输入流")]),t._v(" "),a("th",[t._v("字符输出流")]),t._v(" "),a("th",[t._v("字符输入流")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("抽象基类")]),t._v(" "),a("td",[t._v("OutputStream")]),t._v(" "),a("td",[t._v("InputStream")]),t._v(" "),a("td",[t._v("Writer")]),t._v(" "),a("td",[t._v("Reader")])]),t._v(" "),a("tr",[a("td",[t._v("文件相关")]),t._v(" "),a("td",[a("strong",[t._v("FileOutputStream")])]),t._v(" "),a("td",[a("strong",[t._v("FileInputStream")])]),t._v(" "),a("td",[a("strong",[t._v("FileWriter")])]),t._v(" "),a("td",[a("strong",[t._v("FileReader")])])]),t._v(" "),a("tr",[a("td",[t._v("缓冲相关")]),t._v(" "),a("td",[t._v("BufferedOutputStream")]),t._v(" "),a("td",[t._v("BufferedInputStream")]),t._v(" "),a("td",[t._v("BufferedWriter")]),t._v(" "),a("td",[t._v("BufferedReader")])]),t._v(" "),a("tr",[a("td",[t._v("转换相关")]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td",[a("strong",[t._v("OutputStreamWriter")])]),t._v(" "),a("td",[a("strong",[t._v("InputStreamReader")])])]),t._v(" "),a("tr",[a("td",[t._v("打印流")]),t._v(" "),a("td",[t._v("PrintStream")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("PrintWriter")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("数据流")]),t._v(" "),a("td",[t._v("DataOutputStream")]),t._v(" "),a("td",[t._v("DataInputStream")]),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("对象流")]),t._v(" "),a("td",[t._v("ObjectOutputStream")]),t._v(" "),a("td",[t._v("ObjectInputStream")]),t._v(" "),a("td"),t._v(" "),a("td")])])]),t._v(" "),a("p",[a("strong",[t._v("FileOutputStream")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileOutputSteam")]),t._v(" out "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileOutputStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a.txt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("97")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"你好吗？"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getByte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("write用法：\nwrite(int b)\nwrite(byte[] b)\nwrite(byte[] b, int off, int len)")]),t._v(" "),a("p",[a("strong",[t._v("FileInputStream")])]),t._v(" "),a("p",[t._v("方式一：按单字节读取")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileImputStream")]),t._v(" in "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileInputStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"D:/1/1.txt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" readData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("readData "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" in"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("readData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("方式二：按多字节读取")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileInputStream")]),t._v(" in "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileInputStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"D:/1/1.txt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" bytes "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" readCount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("readCount "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" in"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bytes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bytes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readCount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("strong",[t._v("多线程")])]),t._v(" "),a("p",[a("strong",[t._v("创建线程的三种方式")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("创建Thread类的子类对象")])]),t._v(" "),a("li",[a("p",[t._v("基于Runnable接口创建Thread对象")])])]),t._v(" "),a("p",[t._v("​\t使用Thread类的构造器Thread(Runnable target)创建线程。\n​\t有两种方式：\n​\t\t(1) 创建一个实现Runnable接口的类，创建子类对象，然后传递给Thread构造器，创建一个Thread对象。\n​\t\t(2) 匿名内部类和lambda表达式")]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("基于Callable接口创建Thread对象")])]),t._v(" "),a("p",[t._v("​\t\t(1) 实现Callable接口\n​\t\t(2) 创建一个FutrueTask对象，以Callable实现类的对象作为参数传递给FutureTask的构造器。\n​\t\t(3) 将FutrueTask对象作为参数传递给Thread构造器，创建一个Thread对象。")]),t._v(" "),a("p",[t._v("方式一和方式二的比较\n(1) 方式一必须直接继承Thread类，而java是单继承的，方式二没有这种限制。\n(2) 方式二把线程对象和任务分开定义，实现了解耦，多个线程可以做同一个任务，更有利于线程间的数据共享。")]),t._v(" "),a("p",[a("strong",[t._v("run() 和 start() 方法有什么区别")])]),t._v(" "),a("ol",[a("li",[t._v("run()方法\nrun()方法中定义了线程要执行的任务，直接调用run方法并不会启动一个新的线程，而只是普通的方法调用，在当前的线程中执行run()方法中的代码。")]),t._v(" "),a("li",[t._v("start()方法\nstart()方法用于启动一个新的线程。当一个线程调用start()方法后，该线程会执行run()方法中的代码。")])]),t._v(" "),a("p",[a("strong",[t._v("线程池")])]),t._v(" "),a("p",[t._v("线程容器：负责存储维护一组线程的容器，其中的线程可以被反复使用。\n任务队列：是一个阻塞队列，用于存储线程池当前等待执行的任务。\n**任务队列就像一个流水线，线程容器中的线程就像工人。**如果线程容器中还有空闲的线程，就从任务队列队首获取任务并执行，如果没有空闲的线程，任务队列就排队等待。任务比较多时，还可以创建更多的线程来执行任务。")]),t._v(" "),a("p",[t._v("流程：\n(1) 创建线程池（对象）\njava.util.concurrent.Executors：工具类，用于生成线程池对象。\njava.util.ocncurrent.ExecutorService：一个接口，全体线程池类型的父类，用于指代线程池对象。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//可自动扩容的线程容器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" pool "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newCachedThreadPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建一个固定线程数量的线程池")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" pool "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newFixedThreadPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//线程数量固定为1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" pool "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newSingleThreadExecutor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[t._v("(2) 向线程池提交任务，先来先执行。\n依赖于接口java.util.concurrent.ExecutorService当中的两个submit方法：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Future")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("submit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" task"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Future")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("submit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Callable")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" task"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("strong",[t._v("提交Runnable任务")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" demo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" pool "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newCachedThreadPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("submit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyRunnableTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyRunnableTask")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("提交Callable任务")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" demo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" pool "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newCachedThreadPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//submit方法的返回值类型是Future")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Future")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" callResult "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("submit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyCallableTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//通过Future接口的get()方法获取call方法返回值")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" callResult"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Sytem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyCallableTask")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Callable")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"你好！"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("(3) 任务调度执行。\n(4) 线程池关闭。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//执行完任务列表中所有已提交的任务，关闭线程池，不在接收新的任务")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shutdown")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//立刻停止所有正在执行的任务，也不再处理任务列表中等待的任务，并返回正在等待执行的任务列表")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shutdownNow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("strong",[t._v("线程池任务执行流程")]),t._v("：")]),t._v(" "),a("p",[t._v('依次将他们"填满"')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("corePoolSize")]),t._v(" "),a("th",[t._v("workQueue")]),t._v(" "),a("th",[t._v("maximumPoolSize")])])]),t._v(" "),a("tbody")]),t._v(" "),a("p",[t._v("① 当线程池小于coreSize时")]),t._v(" "),a("p",[t._v("② 当线程池达到coreSize时")]),t._v(" "),a("p",[t._v("③ 当workQueue已满，且maxPoolSize > corePoolSize时")]),t._v(" "),a("p",[t._v("④ 当线程数大于maximumPoolSize时，新提交任务由RejectedExecutionHandler处理。")]),t._v(" "),a("p",[t._v("⑤  当线程池中"),a("strong",[t._v("超过corePoolSize")]),t._v("，"),a("strong",[t._v("空闲时间达到keepAliveTime")]),t._v("，关闭空闲线程。")]),t._v(" "),a("p",[t._v("⑥ 当设置了allowCoreThreadTimeOut(true)，空闲时间达到keepAliveTIme，关闭空闲线程。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("JUC提供的线程池创建方式")]),t._v(" "),a("th",[t._v("corePoolSize")]),t._v(" "),a("th",[t._v("maximumPoolSize")]),t._v(" "),a("th",[t._v("keepAliveTime")]),t._v(" "),a("th",[t._v("unit")]),t._v(" "),a("th",[t._v("workQueue")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("newCachedThreadPool")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("integer.MAX_VALUE")]),t._v(" "),a("td",[t._v("60L")]),t._v(" "),a("td",[t._v("TimeUnit.SECONDS")]),t._v(" "),a("td",[t._v("SynchronousQueue(同步队列)")])]),t._v(" "),a("tr",[a("td",[t._v("newFixedThreadPool")]),t._v(" "),a("td",[t._v("接收的参数n")]),t._v(" "),a("td",[t._v("接收的参数n")]),t._v(" "),a("td",[t._v("0L(不限时)")]),t._v(" "),a("td",[t._v("TimeUnit.MILLISECONDS")]),t._v(" "),a("td",[t._v("LinkedBlockingQueue(误无界阻塞队列)")])]),t._v(" "),a("tr",[a("td",[t._v("newSingleThreadPool")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("0L")]),t._v(" "),a("td",[t._v("TimeUnit.MILLISECONDS")]),t._v(" "),a("td",[t._v("LinkedBlockingQueue(误无界阻塞队列)")])]),t._v(" "),a("tr",[a("td",[t._v("newScheduledThreadPool")]),t._v(" "),a("td",[t._v("传递来的参数")]),t._v(" "),a("td",[t._v("Integer.MAX_VALUE")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("TimeUnit.MANOSECONDS")]),t._v(" "),a("td",[t._v("DelayedWorkQueue(按超时时间升序排列的队列)")])])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("JUC提供的线程池创建方式")]),t._v(" "),a("th",[t._v("使用场景")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("newCachedThreadPool")]),t._v(" "),a("td",[t._v("执行很多短期异步的小程序或者负载较轻的服务器")])]),t._v(" "),a("tr",[a("td",[t._v("newFixedThreaPool")]),t._v(" "),a("td",[t._v("执行长期的任务，性能好很多")])]),t._v(" "),a("tr",[a("td",[t._v("newSingleThreadPool")]),t._v(" "),a("td",[t._v("一个任务一个任务执行的场景")])]),t._v(" "),a("tr",[a("td",[t._v("newScheduledThreadPool")]),t._v(" "),a("td",[t._v("周期性执行任务的场景")])])])]),t._v(" "),a("p",[a("strong",[t._v("注解反射")])]),t._v(" "),a("p",[t._v("注解就是Java代码中的一个特殊的标记，往往和反射搭配使用，")]),t._v(" "),a("p",[a("strong",[t._v("注解：")])]),t._v(" "),a("p",[t._v("注解的注解(元注解)：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("元注解")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("@Target(ElementType.METHOD)")]),t._v(" "),a("td",[a("strong",[t._v("用于指定该注解使用的位置")]),t._v("。ElementType.TYPE：整个类。ElementType.FIELD：成员变量。ElementType.CONSTRUCTOR：构造器。ElementType.METHOD：成员方法。"),a("strong",[t._v("当没有@Target注解时，该注解可用于任何地方。")])])]),t._v(" "),a("tr",[a("td",[t._v("@Retention(RetentionPolicy.RUNTIME)")]),t._v(" "),a("td",[a("strong",[t._v("注解的存活范围")]),t._v("。RetentionPolicy.RUNTIME：该注解会由JVM保留。RetentionPolicy.CLASS：该注解会在编译时由编译器保留。RetentionPolicy.SOURCE：该注解仅保留在.java源文件中，会被编译器忽视(类似于注释)。"),a("strong",[t._v("当没有@Retention注解时，默认值为RetentionPolicy.CLASS。")])])])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("注解的作用")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("编译检查")]),t._v(" "),a("td",[t._v("@Override，如果子类中有方法被@Override标示，但父类中没有同名方法，就会编译报错。")])]),t._v(" "),a("tr",[a("td",[t._v("在反射中使用")]),t._v(" "),a("td",[t._v("在反射中可以获取一个类的类、方法、属性上的注解，动态代理")])]),t._v(" "),a("tr",[a("td",[t._v("根据注解生成代码")]),t._v(" "),a("td",[t._v("lombok插件")])]),t._v(" "),a("tr",[a("td",[t._v("自定义注解")]),t._v(" "),a("td",[t._v("AOP、切面类、自定义注解")])])])]),t._v(" "),a("p",[t._v("自定义注解")]),t._v(" "),a("p",[t._v('注解通过"@注解名"实例化。')]),t._v(" "),a("p",[t._v('通过"@注解名(属性1=属性值1，属性2=属性值2...)"的形式给注解的属性赋值，数组类型的属性用"{}"赋值。')]),t._v(" "),a("p",[t._v("注解的名为value的属性赋值可以不写属性名(当只给value赋值时才能不写属性名)。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@MyAnnotation")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@MyAnnotation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("666")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@MyAnnotation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("777")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"777"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"777"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyAnnotation")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("反射：")])]),t._v(" "),a("p",[t._v("获取Class对象的方式")]),t._v(" "),a("ul",[a("li",[t._v("Object类的getClass方法")]),t._v(" "),a("li",[t._v("类名/接口名.class")]),t._v(" "),a("li",[t._v('Class.forName("全限定类名")')])]),t._v(" "),a("p",[t._v("获取构造器、成员变量、方法")]),t._v(" "),a("p",[t._v("类对象.getXXX()、类对象.getDeclaredXXX()")]),t._v(" "),a("p",[t._v("其中XXX可以替换成Constructor、Field、Method，分别用来获取Constructor、Field、Method。不带Declared的方法只获取修饰符为public的Constructor、Field、Method，带Declared的方法可以获取所有的Constructor、Field、Method。")]),t._v(" "),a("p",[t._v("上面的方法中没有参数就是获取所有的构造器/成员变量/方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",[t._v("获取方法：类对象.getXXX()、类对象.getDeclaredXXX()")]),t._v(" "),a("th",[t._v("使用")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("构造器Constructor")]),t._v(" "),a("td",[t._v("获取带有形参的"),a("strong",[t._v("构造器")]),t._v("，参数部分要写形参类型的类对象。")]),t._v(" "),a("td",[t._v("xxxConstructor.newInstance()")])]),t._v(" "),a("tr",[a("td",[t._v("成员变量Field")]),t._v(" "),a("td",[t._v("获取指定的的"),a("strong",[t._v("成员变量")]),t._v("，参数部分直接写成员变量的字符串就行了。")]),t._v(" "),a("td",[t._v("xxxField.set(该类对象，属性值)；xxxField.get(该类对象)；")])]),t._v(" "),a("tr",[a("td",[t._v("成员方法Method")]),t._v(" "),a("td",[t._v("获取带有形参的"),a("strong",[t._v("方法")]),t._v("，参数部分要写方法的名称和形参类型的类对象。")]),t._v(" "),a("td",[t._v("xxxMethod.invoke(该类对象，实参列表)")])])])]),t._v(" "),a("p",[t._v("成员变量和成员方法调用的参数中的对象都是通过反射创建的实例。")]),t._v(" "),a("p",[t._v("暴力破解权限(当调用的构造器、属性、方法因为权限问题不可达，就可以使用这个方法破解权限问题)")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("declaredXXX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAccessible")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("strong",[t._v("Stream流")])]),t._v(" "),a("p",[t._v("Stream流式jdk1.8提供的对集合数据进行优化操作的一种数据处理方式。")]),t._v(" "),a("p",[t._v("通常使用集合类对象.stream()的方式创建流。")]),t._v(" "),a("p",[t._v("使用场景：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("创建流")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("中间操作")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("终止操作")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("集合类的Stream")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("filter (过滤)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("count() (计数)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("由值创建")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("distinct (去重)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("collect (存储为List)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("由数组创建")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("limit (截取)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("anyMatch (是否有匹配的)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("skip (跳过)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("allMatch (是否都匹配)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("map (转换)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("noneMatch (是否没有匹配的)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("sorted (排序)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("findAny (找到任意一个元素)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("findFirst (找到第一个元素)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("forEach (遍历流中的元素)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("reduce (按指定方式减少元素)")])])])]),t._v(" "),a("p",[t._v('在collect()中可以使用Collectors.groupingBy(类名::get属性名)将流中的数据分组，处理结果为Map<属性类型, List<类名>>。其中"类名::get属性名"就是分类的依据。')]),t._v(" "),a("p",[a("strong",[t._v("Lambda表达式")])]),t._v(" "),a("blockquote",[a("p",[t._v("lambda表达式是Java8的一个新特性，可以取代接口的匿名内部类，写出更简洁的代码。")])]),t._v(" "),a("ol",[a("li",[t._v("语法和基本使用")])]),t._v(" "),a("p",[t._v("形参列表：强制子类实现的抽象方法的形参列表\n“{}”：重写抽象方法的方法体。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("能够用lambda表达式创建子类对象的接口必须是功能接口(FunctionalInterface)\n> 功能接口的概念：\n> 指的是接口中，有且仅有一个强制子类实现的抽象方法的接口。、\n\n功能接口只有一个方法吗？只有一个抽象方法吗？\n    (1) 功能接口中可以有默认方法和静态方法。\n    (2) 如果一个抽象方法可以用Object类的某个方法作为默认实现，那么该抽象方法就不会强制子类实现。\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[t._v("类型推断的方式\n(1) 直接用父类接口引用接收\n(2) 类似于强制类型转换\n((接口的名字) lambda表达式)")]),t._v(" "),a("p",[t._v("(3) 借助形参的数据类型（lambda表达式作为参数）\n(4) 借助方法的返回值类型（lambda表达式作为返回值）")])]),t._v(" "),a("li",[a("p",[t._v('简化\n(1) "(形参列表)"中的形式参数数据类型可以省略。\n(2) “{}” 如果重写的方法体只有一条语句，就可以省略，如果这一句是return语句，可以直接省略return。\n(3) 方法引用\n用一个已经实现的方法作为lambda表达式抽象方法的实现\nI. 返回值类型\n功能接口中的抽象方法的\n返回值类型是void或基本数据类型，必须保持一致。\n返回值类型是引用数据类型，可以保持一致和返回它的子类。\nII.调用格式：不省略“->”\n(形参列表) -> 已实现方法的调用(形参列表);\nIII.调用格式：省略“->”\n已实现方法的归属者:: 已实现的方法的方法名;\n已实现方法的归属者：静态方法属于类，成员方法属于对象')])])]),t._v(" "),a("h3",{attrs:{id:"_2-集合类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-集合类"}},[t._v("#")]),t._v(" 2. 集合类")]),t._v(" "),a("p",[t._v("List、Set、Map 等集合类，HashMap 的源码。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://changjishun.github.io/blog/skills/DSDB/Collection.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://changjishun.github.io/blog/skills/DSDB/Collection.html"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://changjishun.github.io/blog/skills/DSDB/Map.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://changjishun.github.io/blog/skills/DSDB/Map.html"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("数组、栈、队列、二叉树、图、查找、排序、动态规划、回溯算法(举例排列组合、解二叉树)等常见的数据结构与算法。")]),t._v(" "),a("h3",{attrs:{id:"_3-mysql、redis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-mysql、redis"}},[t._v("#")]),t._v(" 3. MySQL、Redis")]),t._v(" "),a("h4",{attrs:{id:"数据库设计三大范式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库设计三大范式"}},[t._v("#")]),t._v(" 数据库设计三大范式")]),t._v(" "),a("h5",{attrs:{id:"第一范式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一范式"}},[t._v("#")]),t._v(" 第一范式")]),t._v(" "),a("p",[t._v("每个字段的属性不可再分，比如一个字段包含联系方式又包含联系人，就违反了第一范式。")]),t._v(" "),a("h5",{attrs:{id:"第二范式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二范式"}},[t._v("#")]),t._v(" 第二范式")]),t._v(" "),a("p",[t._v("一个主键能唯一确定一条记录")]),t._v(" "),a("h5",{attrs:{id:"第三范式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三范式"}},[t._v("#")]),t._v(" 第三范式")]),t._v(" "),a("p",[t._v("消除传递依赖")]),t._v(" "),a("p",[t._v("反例：")]),t._v(" "),a("p",[t._v("比如有一个表有学号、姓名、系名、系主任名")]),t._v(" "),a("p",[t._v("其中学号 -> 系名、系名 -> 系主任名，那么就可以推：学号 -> 系主任名")]),t._v(" "),a("p",[t._v("第三范式就是要消除这种情况，解决方法就是将该表拆分成学生表和系主任表两张表。")]),t._v(" "),a("p",[t._v("A -> B：A决定B，B依赖于A")]),t._v(" "),a("h4",{attrs:{id:"mysql优化策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql优化策略"}},[t._v("#")]),t._v(" MySQL优化策略")]),t._v(" "),a("p",[a("strong",[t._v("(1)慢查询")])]),t._v(" "),a("p",[t._v("慢查询是指执行时间超过预设阈值的查询语句。优化慢查询是提高数据库性能的重要任务之一。")]),t._v(" "),a("p",[t._v("在日常开发中，我们会给表加索引来提高MySQL的查询效率。但我们有时会遇到给字段加了索引，，但是没有走索引，索引失效的情况，进而导致MySQL产生慢查询。")]),t._v(" "),a("p",[a("strong",[t._v("慢查询产生的原因：")])]),t._v(" "),a("p",[a("strong",[t._v("①sql没有加索引")])]),t._v(" "),a("p",[a("strong",[t._v("②索引失效的情况")])]),t._v(" "),a("ul",[a("li",[t._v("联合查询不满足最左匹配原则。")])]),t._v(" "),a("blockquote",[a("p",[t._v("最左匹配原则：对于联合索引，一个索引由多个字段组成，索引的生效范围是从最左开始的，比如一个索引有(a, b, c)三个字段组成，用哪些作为查询条件才可以走这颗索引树呢，只有(a), (a, b), (a, b, c)。")])]),t._v(" "),a("ul",[a("li",[t._v("like查询以%开头。")]),t._v(" "),a("li",[t._v("where条件的索引列有运算。")]),t._v(" "),a("li",[t._v("索引列使用函数。")]),t._v(" "),a("li",[t._v("查询条件中有or，但是or的字段不是所有都有索引。")])]),t._v(" "),a("p",[a("strong",[t._v("③深分页")])]),t._v(" "),a("p",[t._v("MySQL需要扫描大量的数据才能找到指定页的数据，Page越大查询时间越久，会导致数据库性能急剧下降，并且占用大量的CPU、内存资源。")]),t._v(" "),a("p",[t._v("深分页导致SQL变慢的原因：")]),t._v(" "),a("p",[t._v("limit语句会先扫描offset+n行，然后再丢弃前offset行，返回后n行数据，也就是说limit 10 0000, 10就会扫描10 0010行，而limit 0， 10只扫描10行。")]),t._v(" "),a("p",[t._v("深分页优化：")]),t._v(" "),a("p",[t._v("标签记录法：")]),t._v(" "),a("p",[t._v("就是标记上一次查询到了那一条了，下次再来查的时候，就从这条开始往下扫描。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" goods "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("limit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0010")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" goods "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \n")])])]),a("p",[a("strong",[t._v("(2)优化查询：")])]),t._v(" "),a("p",[a("strong",[t._v("尽量避免使用 select * ，返回无用的字段会降低效率。")])]),t._v(" "),a("p",[t._v("优化方式：只能使用具体的字段代替 select 具体字段，只返回使用到的字段。")]),t._v(" "),a("p",[a("strong",[t._v("尽量避免使用 in 和 not in，会导致数据库引擎放弃索引进行全表扫描。")])]),t._v(" "),a("p",[t._v("优化方式：如果是连续数值，可以用 between 代替，如果是子查询，可以用 exists代替。")]),t._v(" "),a("p",[a("strong",[t._v("尽量避免在字段开头模糊查询，会导致数据库引擎放弃索引进行全表扫描。")])]),t._v(" "),a("p",[t._v("优化方式:尽量在字段后面使用模糊查询。")]),t._v(" "),a("p",[a("strong",[t._v("尽量避免进行 null 值的判断，会导致数据库引擎放弃索引进行全表扫描。")])]),t._v(" "),a("p",[t._v("优化方式:可以给字段添加默认值 0，对 0 值进行判断。")]),t._v(" "),a("p",[a("strong",[t._v("读写分离：")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("读写分离是主服务器负责写，从服务器负责读。读写分离可以大幅度的提高读性能，小幅度的提高写性能。")])]),t._v(" "),a("li",[a("p",[t._v("数据库主机通过复制将数据同步到从机，每台数据库服务器都存储了所有的业务数据。")])]),t._v(" "),a("li",[a("p",[t._v("业务数据库将写请求发给数据库主机，将写请求发送给从机。，")])])]),t._v(" "),a("p",[a("strong",[t._v("读写分离优点")])]),t._v(" "),a("p",[t._v("① 减轻数据库的IO压力，由多个数据分担用户的查询请求压力，大多数公司的业务场景都是读多写少。")]),t._v(" "),a("p",[t._v("② 减少因为数据库读写而导致的加锁逻辑，影响数据库的读写性能。")]),t._v(" "),a("p",[a("strong",[t._v("分库分表：")])]),t._v(" "),a("p",[t._v("当MySQL数据量达到"),a("strong",[t._v("500W条数据")]),t._v("后，由于查询的数据过多，即便进行了很多优化，还是不可避免的出现"),a("strong",[t._v("操作性能下降")]),t._v("，这时就要考虑对其进行切分，减缓数据库的压力，减少查询时间。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("垂直分库")]),t._v(" "),a("td",[t._v("按功能模块拆分，比如分为用户库、商品库、订单库")])]),t._v(" "),a("tr",[a("td",[t._v("垂直分表")]),t._v(" "),a("td",[t._v("当一张表有太多的字段后，需要按照业务模块进行拆分，如用户表拆分为用户基础信息表、用户登录信息表、用户地址表等。")])]),t._v(" "),a("tr",[a("td",[t._v("水平切分")]),t._v(" "),a("td",[a("strong",[t._v("将一个表的数据分为多个表进行存储")]),t._v("，比如将用户表拆分为用户表1、用户表2、用户表3...水平分割分为"),a("strong",[t._v("库内分表")]),t._v("和"),a("strong",[t._v("分库分表")]),t._v("。"),a("strong",[t._v("库内分表")]),t._v("就是将拆分后的表格存储在同一个数据库中，"),a("strong",[t._v("分库分表")]),t._v("就是将拆分后的表格存储在不同的数据库中，这样就就可以避免存储在同一个服务器中仍然会使用同一台机器的CPU、IO。")])])])]),t._v(" "),a("p",[a("strong",[t._v("数据库集群")])]),t._v(" "),a("h4",{attrs:{id:"多表查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多表查询"}},[t._v("#")]),t._v(" 多表查询")]),t._v(" "),a("p",[a("strong",[t._v("连接查询")])]),t._v(" "),a("p",[a("strong",[t._v("交叉连接")])]),t._v(" "),a("p",[t._v("交叉连接其实就是在求多个表之间的笛卡尔积，就是两表之间每一行两两组合。")]),t._v(" "),a("p",[t._v("例如左表有3条记录，右表有4条记录，他们两两组合就有12种结果。")]),t._v(" "),a("p",[t._v("交叉查询本身没有意义，但是内连接和外连接都是基于交叉查询的结果去筛选的。")]),t._v(" "),a("p",[a("strong",[t._v("内连接")])]),t._v(" "),a("p",[t._v("将两个之间的记录按连接条件匹配，满足连接条件的两行就会拼接成新的一行。")]),t._v(" "),a("p",[t._v("只会返回匹配到的")]),t._v(" "),a("p",[a("strong",[t._v("外连接")])]),t._v(" "),a("p",[t._v("与内连接不同的是外连接会保留左表或右表中没有匹配上的行，这些行对应的剩下来的属性都赋值null")]),t._v(" "),a("p",[t._v("左外连接就是保留左表中没有匹配上的行，右外连接就是保留右表中没有匹配上的行。")]),t._v(" "),a("h4",{attrs:{id:"索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引"}},[t._v("#")]),t._v(" 索引")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://changjishun.github.io/blog/skills/DSDB/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95.html#%E7%B4%A2%E5%BC%95",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://changjishun.github.io/blog/skills/DSDB/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95.html#%E7%B4%A2%E5%BC%95"),a("OutboundLink")],1)]),t._v(" "),a("h4",{attrs:{id:"事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务"}},[t._v("#")]),t._v(" 事务")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://changjishun.github.io/blog/skills/DSDB/JDBC.html#%E4%BB%8B%E7%BB%8D-2",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://changjishun.github.io/blog/skills/DSDB/JDBC.html#%E4%BB%8B%E7%BB%8D-2"),a("OutboundLink")],1)]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("脏读")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("不可重复读")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("虚读/幻读")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("读未提交")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("×")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("×")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("×")])]),t._v(" "),a("tr",[a("td",[t._v("读已提交")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("√")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("×")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("×")])]),t._v(" "),a("tr",[a("td",[t._v("可重复读")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("√")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("√")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("×")])]),t._v(" "),a("tr",[a("td",[t._v("串行化")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("√")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("√")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("√")])])])]),t._v(" "),a("h4",{attrs:{id:"redis常见数据结构和使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis常见数据结构和使用场景"}},[t._v("#")]),t._v(" Redis常见数据结构和使用场景")]),t._v(" "),a("p",[t._v("Redis是一个NoSQL数据库。")]),t._v(" "),a("p",[t._v("NoSQL: not only SQL。表示非关系型数据库（不支持SQL标准语法）。")]),t._v(" "),a("p",[t._v("Redis是一个使用C语言编写的、免费的、开源的、支持网络、可基于内存、亦可持久化的日志型，key-value 非关系型数据库，并且提供多种语言的API")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("C语言编写的")])]),t._v(" "),a("li",[a("p",[t._v("开源的（"),a("a",{attrs:{href:"https://github.com/redis",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/redis"),a("OutboundLink")],1),t._v("）")])]),t._v(" "),a("li",[a("p",[t._v("可基于内存：是把数据存在到内存上的")])]),t._v(" "),a("li",[a("p",[t._v("可持久化：可以把内存里面的数据持久化到磁盘(为了实现数据恢复)")])]),t._v(" "),a("li",[a("p",[t._v("key-value：数据在内存中是以键值对的方式来存储的")])]),t._v(" "),a("li",[a("p",[t._v("支持网络：客户端是通过网络连接服务端的")])]),t._v(" "),a("li",[a("p",[t._v("支持多种语言：可以在各种语言的代码中操作Redis")])])]),t._v(" "),a("p",[t._v("常见数据结构及使用场景")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("数据结构")]),t._v(" "),a("th",[t._v("使用场景")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("string")]),t._v(" "),a("td",[t._v("setnx")])]),t._v(" "),a("tr",[a("td",[t._v("list")]),t._v(" "),a("td",[t._v("本项目为了解决超卖问题，使用list存储商品库存")])]),t._v(" "),a("tr",[a("td",[t._v("set")]),t._v(" "),a("td",[t._v("求共同好友，好友推荐")])]),t._v(" "),a("tr",[a("td",[t._v("hash")]),t._v(" "),a("td",[t._v("类似于Java中的Map，可以用于存储购物车中的商品信息")])]),t._v(" "),a("tr",[a("td",[t._v("sortedSet")]),t._v(" "),a("td",[t._v("计算商品的热度排名，让商品信息按热度排序")])])])]),t._v(" "),a("p",[t._v("缓存问题分析")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("缓存穿透")]),t._v("：查询的数据在数据库中不存在（"),a("strong",[t._v("访问数据库中不存在的数据")]),t._v("）。这样会导致这个不存在的数据每次请求都要到数据库中查询。如果查询这种不存在的数据的请求量很大就很容易导致数据库宕机。")]),t._v(" "),a("p",[t._v("解决办法：针对这种数据库中查询不到的数据，就将查询结果定义为null或默认值缓存到redis中，并将缓存结果定义一个过期时间。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("缓存雪崩")]),t._v("：指redis中具有过期时间的数据在"),a("strong",[t._v("同一时刻失效")]),t._v("，就会导致大量的请求同时访问数据库，导致数据库瞬时压力过大甚至宕机。")]),t._v(" "),a("p",[t._v("解决方法：给具有过期时间的数据设置随机的过期时间，这样每一个缓存数据的过期时间相同的概率就会降低，就很难会引起集体失效的事件。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("缓存击穿")]),t._v("：指当缓存中某个key过期了，在该热点数据重新载入缓存之前，有大量的查询请求穿过缓存，直接查询数据库。这样就会导致数据库压力瞬时剧增，造成大量请求阻塞，甚至直接挂掉。")]),t._v(" "),a("p",[t._v("解决方法：使用Redis提供的分布式锁，保证同一时刻只能有一个查询请求加载热点数据到缓存中，这样，其他的线程只需要等待该线程运行完毕，即可重新从redis中获取数据。")])])]),t._v(" "),a("h4",{attrs:{id:"redis的持久化策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis的持久化策略"}},[t._v("#")]),t._v(" Redis的持久化策略")]),t._v(" "),a("p",[a("strong",[t._v("RDB(Redis DateBase)")]),t._v("：通过内存快照的形式来讲内存中的数据持久化到磁盘中，是Redis默认的持久化策略，没有提供开关关闭。")]),t._v(" "),a("p",[t._v("快照：是一种内存技术，可以像对内存拍照一样，保存内存当时的状态。")]),t._v(" "),a("ul",[a("li",[t._v("快照的速度很快")]),t._v(" "),a("li",[t._v("快照保存的是一种"),a("strong",[t._v("数据的状态")]),t._v("，占用磁盘空间很小")]),t._v(" "),a("li",[t._v("快照会"),a("strong",[t._v("保存完整的数据")])])]),t._v(" "),a("p",[a("strong",[t._v("AOF(Append Only File)")]),t._v("：通过追加日志文件的方式来保存数据，将用户的每一个写入命令保存到文件中，后续可以通过执行这个文件的所有命令来恢复数据")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("RDB")]),t._v(" "),a("th",[t._v("AOF")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("每次保存的是触发RDB时刻的完整数据")]),t._v(" "),a("td",[t._v("可以做到不丢失数据")])]),t._v(" "),a("tr",[a("td",[t._v("可能会丢失上一次持久化之后所有写入的数据")]),t._v(" "),a("td",[t._v("保存数据生成的文件会越来越大，占用磁盘空间比较大")])]),t._v(" "),a("tr",[a("td",[t._v("保存、还原数据很快")]),t._v(" "),a("td",[t._v("还原数据是通过执行文件中所有的命令来还原的，还原速度比较慢")])])])]),t._v(" "),a("p",[t._v("RDB和AOF可以同时运行，当两种机制都开启的时候，恢复数据的时候优先从AOF生成的文件来恢复。")]),t._v(" "),a("h4",{attrs:{id:"redis的内存淘汰策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis的内存淘汰策略"}},[t._v("#")]),t._v(" Redis的内存淘汰策略")]),t._v(" "),a("p",[t._v("当Redis内存满了之后会触发内存淘汰策略")]),t._v(" "),a("p",[t._v("总体有两类，每一类共有的：lru、lfu、random")]),t._v(" "),a("p",[t._v("针对设置了过期时间的数据集")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("策略")]),t._v(" "),a("th",[t._v("淘汰对象")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("volatile-"),a("strong",[t._v("lru")]),t._v("(least-recent-used)")]),t._v(" "),a("td",[t._v("最近最少使用数据")])]),t._v(" "),a("tr",[a("td",[t._v("volatile-"),a("strong",[t._v("lfu")])]),t._v(" "),a("td",[t._v("选择一段时间内使用最少的数据")])]),t._v(" "),a("tr",[a("td",[t._v("volatile-"),a("strong",[t._v("random")])]),t._v(" "),a("td",[t._v("随机选择数据")])]),t._v(" "),a("tr",[a("td",[t._v("volatile-ttl")]),t._v(" "),a("td",[t._v("最近将要过期的数据")])])])]),t._v(" "),a("p",[t._v("针对所有数据集")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("策略")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("allkeys-"),a("strong",[t._v("lru")])]),t._v(" "),a("td",[t._v("最近最少使用的数据")])]),t._v(" "),a("tr",[a("td",[t._v("allkeys-"),a("strong",[t._v("random")])]),t._v(" "),a("td",[t._v("随机选择数据")])]),t._v(" "),a("tr",[a("td",[t._v("allkeys-"),a("strong",[t._v("lfu")])]),t._v(" "),a("td",[t._v("选择一段时间内使用最好的数据")])]),t._v(" "),a("tr",[a("td",[t._v("no-evication")]),t._v(" "),a("td",[t._v("禁止淘汰策略")])])])]),t._v(" "),a("p",[t._v("选择哪一种策略比较合理？")]),t._v(" "),a("p",[t._v("从效率角度出发：allkeys-random")]),t._v(" "),a("p",[t._v("从合理性角度出发：volatile-lru")]),t._v(" "),a("h3",{attrs:{id:"_4-spring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-spring"}},[t._v("#")]),t._v(" 4. Spring")]),t._v(" "),a("h4",{attrs:{id:"ioc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ioc"}},[t._v("#")]),t._v(" IOC")]),t._v(" "),a("p",[t._v("使用 Spring 管理对象，实现依赖注入，实现了"),a("strong",[t._v("解耦")]),t._v("，避免了一处改动就要修改多处代码，减少了多次创建对象造成的资源浪费。")]),t._v(" "),a("p",[t._v("为什么要将对象的创建权利交给IOC容器？")]),t._v(" "),a("p",[t._v("① 解耦")]),t._v(" "),a("p",[t._v("举例：比如有10个Controller依赖了UserService，最开始实例化的是UserServiceImpl")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserService")]),t._v(" userService "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserServiceImpl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("后面需要换一个实现类UserServiceImpl2")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserService")]),t._v(" userService "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserServiceImpl2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("那就需要逐个修改那几个Controller")]),t._v(" "),a("p",[t._v("使用IOC管理对象后，只需要修改实现类就行了，无需修改使用到该实现类的代码。")]),t._v(" "),a("p",[t._v("② 复用对象")]),t._v(" "),a("p",[t._v("在JavaEE中，每使用某个类的对象一次就实例化一次，会造成资源的浪费，而spring的IOC思想就是将一个类的对象存入IOC容器中，等到需要使用的时候，就从容器中取即可，这样由spring管理的类(组件)，都只有唯一的对象。")]),t._v(" "),a("h4",{attrs:{id:"aop-aspectj"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aop-aspectj"}},[t._v("#")]),t._v(" AOP（aspectj）")]),t._v(" "),a("p",[t._v("AOP(Aspect Oriented Programming)：面向切面编程")]),t._v(" "),a("p",[t._v("背后的思想是动态代理，代理可以在原有的核心业务的基础上添加额外的功能，这样就可以将比较常用的非核心业务提取出来，由代理类替我们完成")]),t._v(" "),a("p",[t._v("面向切面编程：定义一个切面类，切面里面定义了切入点(需要使用代理的地方)和通知方法(代理增加的额外的方法)，在我们使用切入点范围内的类的对象时，Spring会在指定的位置自动添加上额外的方法。")]),t._v(" "),a("p",[t._v("切入点：是定位连接点的方式，是用于确定需要增强的范围")]),t._v(" "),a("p",[t._v("连接点：可以使用通知的地方。")]),t._v(" "),a("p",[t._v("增强：执行额外的方法。")]),t._v(" "),a("p",[t._v("切面：用于定义增强方法。")]),t._v(" "),a("p",[t._v("写通知方法，在方法上写下列注解，不同的注解决定通知方法相对委托类方法执行的位置")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("注解")]),t._v(" "),a("th",[t._v("解释")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("@Before")]),t._v(" "),a("td",[t._v("在委托类方法之前执行")])]),t._v(" "),a("tr",[a("td",[t._v("@AfterReturning")]),t._v(" "),a("td",[t._v("在委托类有返回值之后执行")])]),t._v(" "),a("tr",[a("td",[t._v("@AfterThrowing")]),t._v(" "),a("td",[t._v("在委托类抛异常后执行")])]),t._v(" "),a("tr",[a("td",[t._v("@After")]),t._v(" "),a("td",[t._v("在委托类方法之后执行")])]),t._v(" "),a("tr",[a("td",[t._v("@Around")]),t._v(" "),a("td",[t._v("环绕，委托类在该方法中执行")])])])]),t._v(" "),a("h4",{attrs:{id:"springbean的生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springbean的生命周期"}},[t._v("#")]),t._v(" SpringBean的生命周期")]),t._v(" "),a("p",[a("strong",[t._v("初始化阶段的方法")])]),t._v(" "),a("ol",[a("li",[t._v("Bean的实例化")]),t._v(" "),a("li",[t._v("设置参数方法")]),t._v(" "),a("li",[t._v("BeanNameAware、BeanFactoryAware、ApplicationContextAware")]),t._v(" "),a("li",[t._v("BeanPostProcessor的postProcessBeforeInitialization")]),t._v(" "),a("li",[t._v("InitializingBean的afterPropertiesSet方法")]),t._v(" "),a("li",[t._v("自定义的init方法")]),t._v(" "),a("li",[t._v("BeanPostProcessor的postProcessAfterInitialization")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AdminServiceImpl")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AdminService")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeanNameAware")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeanFactoryAware")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ApplicationContextAware")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InitializingBean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DisposableBean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 1. 构造器，可以使用有参构造器，也可以使用无参构造器\n     */")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 2. 设置属性值\n     *    a. 构造方法注入\n     *    b. 方法注入\n     *    c. 成员变量注入\n     *\n     * 常量也可以设置属性值：@Value → 后面SpringBoot阶段会去使用\n     */")]),t._v("\n     \n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 3. BeanNameAware、BeanFactoryAware、ApplicationContextAware\n     *   a. BeanNameAware → setBeanName → 传入beanName：当前组件的id\n     *   b. BeanFactoryAware → setBeanFactory → 传入beanFactory：当前组件所在的容器\n     *   c. ApplicationContextAware → setApplicationContext → 传入applicationContext：当前组件所在的容器\n     *\n     *   在这里传入这些值：目的是为了让当前组件能够获取到这些值，因为你接下来的一些方法里有可能使用到这样的一些值\n     *   如果你需要获得这些值，就实现接口；如果不需要，则不实现接口；这不是必须的\n     */")]),t._v("\n     \n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 5. InitializingBean的afterPropertiesSet方法\n     * 实现InitializingBean接口，重写afterPropertiesSet方法\n     * 5和6都是初始化方法，只不过5通常是第三方依赖提供的初始化方法，6通常是我们自己开发的时候提供的初始化方法\n     */")]),t._v("\n     \n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 6. 自定义的init方法\n     * 通过@PostConstruct注解指定方法\n     */")]),t._v("\n     \n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 销毁方法\n     *   自定义销毁方法 @PreDestroy注解指定方法\n     *   DisposableBean接口的destroy\n     *\n     */")]),t._v("\n")])])]),a("p",[a("strong",[t._v("容器关闭阶段的方法")])]),t._v(" "),a("p",[t._v("单例的组件才会执行到对应的方法")]),t._v(" "),a("p",[t._v("DisposableBean的destroy方法")]),t._v(" "),a("p",[t._v("自定义的destroy方法")]),t._v(" "),a("p",[a("strong",[t._v("简化版")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("实例化：")]),t._v(" "),a("p",[t._v("当Spring容器加载配置文件时，会根据配置创建Bean的定义。然后，通过调用Bean的构造函数来实例化Bean对象。")])]),t._v(" "),a("li",[a("p",[t._v("属性赋值：")]),t._v(" "),a("p",[t._v("在实例化Bean后，Spring容器将通过依赖注入（Dependency Injection）或属性注入的方式来设置Bean的属性和依赖。这可以通过构造函数注入、Setter方法注入或注解方式实现。")])]),t._v(" "),a("li",[a("p",[t._v("初始化：")]),t._v(" "),a("p",[t._v("在属性赋值完成后，Spring容器会调用Bean的初始化回调方法。Bean的初始化可以通过实现InitializingBean接口的afterPropertiesSet()方法或在配置文件中指定init-method来完成。开发者可以在初始化回调方法中执行一些自定义的初始化逻辑。")])]),t._v(" "),a("li",[a("p",[t._v("使用：")]),t._v(" "),a("p",[t._v("在Bean完成初始化后，可以被应用程序使用。可以通过Spring容器获取Bean实例，并调用Bean的方法来执行相应的业务逻辑。")])]),t._v(" "),a("li",[a("p",[t._v("销毁：")]),t._v(" "),a("p",[t._v("当应用程序关闭或销毁时，Spring容器会调用Bean的销毁回调方法。Bean的销毁可以通过实现DisposableBean接口的destroy()方法或在配置文件中指定destroy-method来完成。开发者可以在销毁回调方法中执行一些清理资源的操作。")])])]),t._v(" "),a("h4",{attrs:{id:"spring事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring事务"}},[t._v("#")]),t._v(" Spring事务")]),t._v(" "),a("p",[a("strong",[t._v("事务的特性")])]),t._v(" "),a("ul",[a("li",[t._v("原子性 Atomicity")]),t._v(" "),a("li",[t._v("一致性 Consistency")]),t._v(" "),a("li",[t._v("隔离性 Isolation")]),t._v(" "),a("li",[t._v("持久性 Durability")])]),t._v(" "),a("p",[a("strong",[t._v("事务并发引起的问题")])]),t._v(" "),a("ul",[a("li",[t._v("脏读\n"),a("ul",[a("li",[t._v("一个事务读取到另外一个事务"),a("font",{attrs:{color:"red"}},[t._v("还未提交")]),t._v("的数据")],1)])]),t._v(" "),a("li",[t._v("不可重复读\n"),a("ul",[a("li",[t._v("一个事务读取到另外一个事务"),a("font",{attrs:{color:"red"}},[t._v("已经提交")]),t._v("的数据"),a("font",{attrs:{color:"red"}},[t._v("（修改）")])],1)])]),t._v(" "),a("li",[t._v("虚读/幻读\n"),a("ul",[a("li",[t._v("一个事务读取到另外一个事务"),a("font",{attrs:{color:"red"}},[t._v("已经提交")]),t._v("的数据"),a("font",{attrs:{color:"red"}},[t._v("（增删）")])],1)])])]),t._v(" "),a("p",[a("strong",[t._v("数据库的隔离级别")])]),t._v(" "),a("ul",[a("li",[t._v("读未提交（Read uncommitted）")]),t._v(" "),a("li",[t._v("读已提交（Read committed）")]),t._v(" "),a("li",[t._v("可重复读（Repeatable read）")]),t._v(" "),a("li",[t._v("串行化（Serializable）")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("脏读")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("不可重复读")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("虚读/幻读")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("读未提交")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("×")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("×")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("×")])]),t._v(" "),a("tr",[a("td",[t._v("读已提交")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("√")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("×")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("×")])]),t._v(" "),a("tr",[a("td",[t._v("可重复读")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("√")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("√")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("×")])]),t._v(" "),a("tr",[a("td",[t._v("串行化")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("√")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("√")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("√")])])])]),t._v(" "),a("p",[t._v("MySql的默认隔离级别是可重复读，但没有虚读问题的。")]),t._v(" "),a("p",[a("strong",[t._v("事物的传播行为")])]),t._v(" "),a("p",[t._v("以"),a("strong",[t._v("外围事务A，内部事务B")]),t._v("举例")]),t._v(" "),a("p",[t._v("当发生异常时")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("事物的传播行为")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("required")]),t._v(" "),a("td",[t._v("一荣俱荣，不管谁发生异常都回滚")])]),t._v(" "),a("tr",[a("td",[t._v("requires_new")]),t._v(" "),a("td",[t._v("外部不会影响内部，内部会影响外部")])]),t._v(" "),a("tr",[a("td",[t._v("nested")]),t._v(" "),a("td",[t._v("外部会影响内部，内部不会影响外部")])])])]),t._v(" "),a("p",[a("strong",[t._v("事务注解@Transactional的使用")])]),t._v(" "),a("p",[t._v("① 打开事物的注解驱动，在配置类上写@EnableTransactionManagement")]),t._v(" "),a("p",[t._v("② 可以在类或方法上写上@Trasactional注解，注解可以指定事物的传播行为。")]),t._v(" "),a("h4",{attrs:{id:"spring常用注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring常用注解"}},[t._v("#")]),t._v(" Spring常用注解")]),t._v(" "),a("p",[t._v("注册组件的注解")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("注解")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("@Component")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("@Controller")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("@Service")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("@Repository")]),t._v(" "),a("td")])])]),t._v(" "),a("p",[t._v("注入Bean的注解")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("注解")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("@Autowired")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("@Inject")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("@Resource")]),t._v(" "),a("td")])])]),t._v(" "),a("p",[t._v("配置类相关注解")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("注解")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("@Configuration")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("@ComponentScan")]),t._v(" "),a("td")])])]),t._v(" "),a("p",[t._v("切面相关注解")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("注解")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("@Aspect")]),t._v(" "),a("td",[t._v("用于声明一个切面类")])]),t._v(" "),a("tr",[a("td",[t._v("@PointCut")]),t._v(" "),a("td",[t._v("用于指定切面中的通知方法作用的切入点")])])])]),t._v(" "),a("p",[t._v("注入配置文件")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("注解")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("@Value")]),t._v(" "),a("td",[t._v('举例：@Value("${book.name}")')])])])]),t._v(" "),a("p",[t._v("定时任务")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("注解")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("@EnableScheduling")]),t._v(" "),a("td",[t._v("写在配置类上，开启定时任务开关")])]),t._v(" "),a("tr",[a("td",[t._v("@Scheduled")]),t._v(" "),a("td",[t._v("用于声明定时任务，设置定时任务")])])])]),t._v(" "),a("h3",{attrs:{id:"_5-springmvc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-springmvc"}},[t._v("#")]),t._v(" 5. SpringMVC")]),t._v(" "),a("h4",{attrs:{id:"路径映射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路径映射"}},[t._v("#")]),t._v(" 路径映射")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("注解")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("@RequestMapping")]),t._v(" "),a("td",[t._v("method属性可以指定请求方式，例如：@RequestMapping(method=RquestMethod.GET)")])]),t._v(" "),a("tr",[a("td",[t._v("@GetMapping")]),t._v(" "),a("td",[t._v("等价于@RequestMapping(method=RquestMethod.GET)")])]),t._v(" "),a("tr",[a("td",[t._v("@PostMapping")]),t._v(" "),a("td",[t._v("等价于@RequestMapping(method=RquestMethod.POST)")])]),t._v(" "),a("tr",[a("td",[t._v("@DeleteMapping")]),t._v(" "),a("td",[t._v("等价于@RequestMapping(method=RquestMethod.DELETE)")])]),t._v(" "),a("tr",[a("td",[t._v("@PutMapping")]),t._v(" "),a("td",[t._v("等价于@RequestMapping(method=RquestMethod.PUT)")])])])]),t._v(" "),a("h4",{attrs:{id:"请求窄化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请求窄化"}},[t._v("#")]),t._v(" 请求窄化")]),t._v(" "),a("p",[t._v("请求路径映射的注解可以写在类上面，也可以写在方法上面。")]),t._v(" "),a("p",[t._v("窄化请求就是把一些前缀相同的URL的公共前缀提取出来放在类上面的@Request注解里，在具体的处理方法上面的路径映射注解就可以省略这些前缀。")]),t._v(" "),a("p",[t._v("举例：")]),t._v(" "),a("p",[t._v('如果有一个Controller专门处理请求以"/api/user/inner"开头的URL，就可以在该Controller的类上面直接写注解@RequestMapping("/api/user/inner")，然后针对每一个具体请求的处理方法写的注解为对应的URL中"/api/user/inner"后面的部分。')]),t._v(" "),a("h4",{attrs:{id:"请求参数的封装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请求参数的封装"}},[t._v("#")]),t._v(" 请求参数的封装")]),t._v(" "),a("p",[t._v("使用 SpringMVC 简化了对请求的处理，能够自动的获取 QueryString、PathVariable 和请求体中携带的数据并转化成指定的数据类型对象，能够将返回的对象自动转换成 JSON 数据返回给前端。")]),t._v(" "),a("p",[t._v("这些注解都是写在方法的形参前，用于获取形参的值，注解的value(注解括号里的字符串)都是要获取的参数在请求报文中的名字或占位符")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("注解")]),t._v(" "),a("th",[t._v("解释")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("@PathVariable")]),t._v(" "),a("td",[t._v("将url中的指定的参数赋给形参，使用占位符指定")])]),t._v(" "),a("tr",[a("td",[t._v("@RequestParam")]),t._v(" "),a("td",[t._v("获取指定的请求参数")])]),t._v(" "),a("tr",[a("td",[t._v("@RequestHeader")]),t._v(" "),a("td",[t._v("获取指定的请求头的值")])]),t._v(" "),a("tr",[a("td",[t._v("@CookieValue")]),t._v(" "),a("td",[t._v("获取指定Cookie的值")])]),t._v(" "),a("tr",[a("td",[t._v("@SessionAttribute")]),t._v(" "),a("td",[t._v("获取指定Session的值")])])])]),t._v(" "),a("p",[t._v("@RequestBody注解用于接收json请求数据")]),t._v(" "),a("h4",{attrs:{id:"自定义类型转换器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义类型转换器"}},[t._v("#")]),t._v(" 自定义类型转换器")]),t._v(" "),a("p",[t._v("Spring MVC提供了类型转换器来将"),a("strong",[t._v("请求参数")]),t._v("转换为"),a("strong",[t._v("方法参数")]),t._v("所需的类型。如果需要自定义类型转换逻辑，可以实现"),a("code",[t._v("Converter")]),t._v("或"),a("code",[t._v("Formatter")]),t._v("接口，并通过配置将其注册到Spring MVC中。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyCustomConverter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Converter")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyCustomType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyCustomType")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("convert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 自定义类型转换逻辑，将字符串转换为自定义类型MyCustomType")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" convertedValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("可以实现"),a("code",[t._v("Converter")]),t._v("接口来创建自定义类型转换器。在上述示例中，将字符串转换为自定义类型"),a("code",[t._v("MyCustomType")]),t._v("。")]),t._v(" "),a("p",[t._v("然后，在配置类或XML配置中注册自定义类型转换器：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Configuration")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebConfig")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebMvcConfigurer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addFormatters")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FormatterRegistry")]),t._v(" registry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        registry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addConverter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyCustomConverter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"自定义拦截器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义拦截器"}},[t._v("#")]),t._v(" 自定义拦截器")]),t._v(" "),a("p",[t._v("通过实现"),a("code",[t._v("HandlerInterceptor")]),t._v("接口，可以自定义拦截器来对请求进行"),a("strong",[t._v("预处理")]),t._v("、"),a("strong",[t._v("后处理")]),t._v("和"),a("strong",[t._v("完成处理")]),t._v("。拦截器可以用于添加日志、权限验证、跨域处理等功能。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyCustomInterceptor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HandlerInterceptor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("preHandle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletRequest")]),t._v(" request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletResponse")]),t._v(" response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" handler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在请求处理之前执行的逻辑，可以进行权限验证、日志记录等操作")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回true继续处理请求，返回false中止请求处理")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("postHandle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletRequest")]),t._v(" request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletResponse")]),t._v(" response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" handler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ModelAndView")]),t._v(" modelAndView"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在请求处理之后、视图渲染之前执行的逻辑")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("afterCompletion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletRequest")]),t._v(" request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletResponse")]),t._v(" response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" handler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" ex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在请求完成后执行的逻辑，包括视图渲染之后")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("可以实现"),a("code",[t._v("HandlerInterceptor")]),t._v("接口来创建自定义拦截器，并根据需要实现相应的方法。在上述示例中，展示了在请求处理前、请求处理后和请求完成后执行的逻辑。")]),t._v(" "),a("p",[t._v("然后，在配置类或XML配置中注册自定义拦截器：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Configuration")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebConfig")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebMvcConfigurer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addInterceptors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterceptorRegistry")]),t._v(" registry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        registry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addInterceptor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyCustomInterceptor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addPathPatterns")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/**"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在上述示例中，将自定义拦截器注册到拦截器注册表中，并使用"),a("code",[t._v("addPathPatterns")]),t._v("方法指定需要拦截的路径模式。")]),t._v(" "),a("h4",{attrs:{id:"自定义异常处理器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义异常处理器"}},[t._v("#")]),t._v(" 自定义异常处理器")]),t._v(" "),a("p",[t._v("Spring MVC允许开发者自定义异常处理器来处理控制器方法抛出的异常。通过实现"),a("code",[t._v("HandlerExceptionResolver")]),t._v("接口，可以定义全局异常处理逻辑，例如将异常信息转换为特定格式的响应。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//@ResponseBody")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//@ControllerAdvice")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RestControllerAdvice")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExceptionControllerAdvice")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 我们要响应JSON")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@ExceptionHandler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArithmeticException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BaseRespVo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleArithmeticException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArithmeticException")]),t._v(" exception"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" exception"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BaseRespVo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fail")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"应用程序正在升级维护"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@ExceptionHandler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MySQLSyntaxErrorException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BaseRespVo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleMySQLSyntaxErrorException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MySQLSyntaxErrorException")]),t._v(" exception"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        exception"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BaseRespVo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mysqlSyntaxError")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"dispatcherservlet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dispatcherservlet"}},[t._v("#")]),t._v(" DispatcherServlet")]),t._v(" "),a("p",[t._v("DispatcherServlet接收所有的请求，然后转发给对应的Controller处理。")]),t._v(" "),a("p",[t._v("请求接收和转发：DispatcherServlet通过监听Web容器的请求，并拦截所有的请求。他根据配置的URL映射规则，将请求分发给相应的Controller进行处理。")]),t._v(" "),a("p",[t._v("处理器映射：DispatcherServlet维护一个处理器映射表，用于将URL映射到具体的处理器(Controller)。处理器映射可以通过@RequestMapping注解或其他方式进行配置。")]),t._v(" "),a("h4",{attrs:{id:"springmvc常见注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springmvc常见注解"}},[t._v("#")]),t._v(" SpringMVC常见注解")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("注解")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("@Controller")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("@RestController")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("@ResponseBody")]),t._v(" "),a("td")])])]),t._v(" "),a("p",[t._v("其他常见的注解都在路径映射和参数封装中提到过。")]),t._v(" "),a("h3",{attrs:{id:"_6-mybatis、mybatis-plus"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-mybatis、mybatis-plus"}},[t._v("#")]),t._v(" 6. MyBatis、MyBatis-Plus")]),t._v(" "),a("h4",{attrs:{id:"输入输出映射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#输入输出映射"}},[t._v("#")]),t._v(" 输入输出映射")]),t._v(" "),a("p",[a("strong",[t._v("输入映射")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("传值")]),t._v(" "),a("th",[t._v("取值")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("形参名")]),t._v(" "),a("td",[t._v("#{形参名}")])]),t._v(" "),a("tr",[a("td",[t._v('@Param("注解值")')]),t._v(" "),a("td",[t._v("#{注解值}")])]),t._v(" "),a("tr",[a("td",[t._v("对象")]),t._v(" "),a("td",[t._v("#{成员变量名}")])]),t._v(" "),a("tr",[a("td",[t._v("使用@Param的对象")]),t._v(" "),a("td",[t._v("#{注解值.成员变量名}")])]),t._v(" "),a("tr",[a("td",[t._v("Map")]),t._v(" "),a("td",[t._v("#{key}")])]),t._v(" "),a("tr",[a("td",[t._v("使用注解的Map")]),t._v(" "),a("td",[t._v("#{注解值.key}")])]),t._v(" "),a("tr",[a("td",[t._v("按形参位置传值")]),t._v(" "),a("td",[t._v("使用#{arg0}、#{arg1}、#{arg2}...或#{param1}、#{param2}、#{param3}")])])])]),t._v(" "),a("p",[a("strong",[t._v("输出映射")])]),t._v(" "),a("p",[t._v("一条结果：使用")]),t._v(" "),a("p",[t._v("多条结果：使用List或Set接收")]),t._v(" "),a("p",[t._v("ResultType: 写全类名或别名")]),t._v(" "),a("p",[t._v("ResultMap: 用于把数据库中的字段与java实体类中的变量进行映射，指定将数据库中的哪个字段传给java中的哪个变量。")]),t._v(" "),a("p",[t._v("column是数据库中的字段名，property是Java中的变量名")]),t._v(" "),a("h4",{attrs:{id:"多表查询-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多表查询-2"}},[t._v("#")]),t._v(" 多表查询")]),t._v(" "),a("p",[t._v("Asociation: 用于一对一查询")]),t._v(" "),a("p",[t._v("Collection: 用于一对多查询")]),t._v(" "),a("h4",{attrs:{id:"动态sql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态sql"}},[t._v("#")]),t._v(" 动态SQL")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("标签")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("使用场景")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("<where>")])]),t._v(" "),a("td",[t._v("帮助我们在最终执行的SQL语句中自动生成where关键字")]),t._v(" "),a("td",[t._v("where标签内部一般搭配其他标签使用")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("<if>")])]),t._v(" "),a("td",[t._v("根据接口方法传入的形参是否满足某个条件来决定是否拼接该标签中的内容")]),t._v(" "),a("td",[t._v("对一个对象的各个属性进行筛选，例如该属性不为null，就拼接对应的查询条件，将该属性作为查询条件。")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("<choose> <when> <otherwise></choose>")])]),t._v(" "),a("td",[a("code",[t._v("<when>")]),t._v("相当于if、else if，"),a("code",[t._v("<otherwise>")]),t._v("相当于else")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("sql-include")]),t._v(" "),a("td",[t._v("用于抽取公共的sql语句，使用"),a("code",[t._v('<sql id="sql_name"/>')]),t._v("抽取，使用"),a("code",[t._v('<include refid="sql_name"/>')]),t._v("引用")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("trim")]),t._v(" "),a("td",[t._v("增加或删除指定的前、后缀。增加前后缀：prefix、suffix。删除前后缀：prefixOverrides、suffixOverrides")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("set")]),t._v(" "),a("td",[t._v('去除set标签中的最后一个","，拼接set关键字')]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("foreach")]),t._v(" "),a("td",[t._v("collection传入参数的类型，如List就写list；item写循环中的元素名；separator写每一个循环的内容之间用什么分割")]),t._v(" "),a("td",[t._v("可用于循环插入")])])])]),t._v(" "),a("p",[t._v("使用"),a("code",[t._v('<insert id="XXX" useGeneratedKeys="true" keyProperty="pone.id">')]),t._v("将插入数据库后自动生成的id赋值给插入的对象的指定属性。")]),t._v(" "),a("h4",{attrs:{id:"懒加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#懒加载"}},[t._v("#")]),t._v(" 懒加载")]),t._v(" "),a("p",[t._v("懒加载也叫延时加载，就是在使用的时候才加载。在Mybatis进行分次查询的时候，假如第二次查询的内容没有被使用到的话，那么就不去执行第二次查询的SQL语句，等到用到第二次查询的内容的时候再去执行第二条SQL语句。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("全局开关：在MyBatis的主配置文件里面的setting里面")]),t._v(" "),a("p",[a("code",[t._v('<setting name="lazyLoadingEnabled" value="true"/>')])])]),t._v(" "),a("li",[a("p",[t._v("局部开关：用于指定关联属性的加载方式")]),t._v(" "),a("p",[t._v("例如：在"),a("code",[t._v("<collection>")]),t._v('中指定fetchType="lazy"')])])]),t._v(" "),a("h4",{attrs:{id:"两级缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两级缓存"}},[t._v("#")]),t._v(" 两级缓存")]),t._v(" "),a("p",[t._v("MyBatis缓存指在Mybatis中单独开辟一块内存空间(Map)，用来存储查询到的数据。后续如果再次调用到了同样的查询，那么就会直接查询缓存。")]),t._v(" "),a("p",[t._v("MyBatis默认开启了一级缓存，并且没有提供开关给用户关闭。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("缓存")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("一级缓存")]),t._v(" "),a("td",[t._v("同一个SqlSession获取的Mapper会走缓存")])]),t._v(" "),a("tr",[a("td",[t._v("二级缓存")]),t._v(" "),a("td",[t._v("同一个namespace(Mapper.xml)共用一块内存")])])])]),t._v(" "),a("p",[t._v("二级缓存开关：")]),t._v(" "),a("p",[a("code",[t._v('<setting name="cacheEnabled" value="true"/>')])]),t._v(" "),a("p",[t._v("二级缓存的优势：")]),t._v(" "),a("p",[t._v("二级缓存是对一级缓存的优化，一级缓存的作用域只限于一个sqlSession连接，当连接关闭后，缓存就没用了，时效性太差了，而采用二级缓存后，缓存能在多个连接之间共享，缓存的利用率、命中率就大大提高。")]),t._v(" "),a("h4",{attrs:{id:"mybatis-plus提供的接口常见的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-plus提供的接口常见的方法"}},[t._v("#")]),t._v(" MyBatis-Plus提供的接口常见的方法")]),t._v(" "),a("h4",{attrs:{id:"条件构造器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#条件构造器"}},[t._v("#")]),t._v(" 条件构造器")]),t._v(" "),a("p",[t._v("用于构造where条件")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("QueryWrapper")]),t._v(" "),a("th",[t._v("UpdateWrapper")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("eq")]),t._v(" "),a("td",[t._v("set")])]),t._v(" "),a("tr",[a("td",[t._v("like")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("between")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("isNotNull")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("orderByDesc")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("gt")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("ge")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("lt")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("le")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("or")]),t._v(" "),a("td")])])]),t._v(" "),a("p",[t._v("QueryWrapper和UpdateWrapper带不带Lambda的区别：体现在传递的参数中对数据库字段的表示方式不同")]),t._v(" "),a("p",[t._v('前面带Lambda的，使用"类名::get属性名()"表示，不带Lambda的直接用字符串表示。')]),t._v(" "),a("p",[t._v("用字符串表示字段可能会存在写的字段名和数据库不一致导致无法找到对应的字段，而使用lambda表达式就可以找到该数据库表对应的类中对应的属性，该类有注解表示其对应的数据库表，该方法有注解表示其对应的字段名。")]),t._v(" "),a("p",[a("strong",[t._v("常用注解")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("注解")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("备注")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("@TableName")]),t._v(" "),a("td",[t._v("定义数据库表和实体类的关系，写在"),a("strong",[t._v("实体类")]),t._v("上面，用于指明该类对应的数据库表名")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("@TableId")]),t._v(" "),a("td",[t._v("写在"),a("strong",[t._v("主键属性")]),t._v("上，用于指定实体类中哪个成员变量（属性）对应数据库表中的主键")]),t._v(" "),a("td",[t._v("该注解的type属性用于指定Mybatis-plus对主键设置的模式，例如：AUTO(数据库ID自增)、ASSIGN_ID(由Mybatis-Plus替我们生成id)")])]),t._v(" "),a("tr",[a("td",[t._v("@TableField")]),t._v(" "),a("td",[t._v("写在"),a("strong",[t._v("普通属性")]),t._v("上，用于指定普通属性和数据库字段之间的映射关系")]),t._v(" "),a("td",[t._v("该注解属性exist设为false，就不会让该属性与数据库之间进行映射")])]),t._v(" "),a("tr",[a("td",[t._v("@TableLogic")]),t._v(" "),a("td",[t._v("写在"),a("strong",[t._v("普通属性")]),t._v("上，对数据库中的记录实现逻辑删除，比如有一个字段is_deleted用于描述逻辑上是否已经删除，就在它对应的属性isDeleted上面添加该注解")]),t._v(" "),a("td")])])]),t._v(" "),a("h4",{attrs:{id:"分页插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分页插件"}},[t._v("#")]),t._v(" 分页插件")]),t._v(" "),a("p",[t._v("使用：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Page")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" page "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Page")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("页码"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 每页的记录数"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nmapper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("selectPage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("page"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("Page中有分页相关的属性，如total、size、current和当前页的记录records")]),t._v(" "),a("h3",{attrs:{id:"_7-mapstruct"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-mapstruct"}},[t._v("#")]),t._v(" 7. MapStruct")]),t._v(" "),a("p",[t._v("使用：")]),t._v(" "),a("p",[t._v("① 引入依赖")]),t._v(" "),a("p",[t._v("② 定义转化器接口")]),t._v(" "),a("p",[t._v("转化器接口中的方法定义格式")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("返回值类型")]),t._v(" "),a("th",[t._v("方法名")]),t._v(" "),a("th",[t._v("形参")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("目标类A")]),t._v(" "),a("td",[t._v("bPO2DTO")]),t._v(" "),a("td",[t._v("待转化类名B 变量名b")])])])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Mapper")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("componentModel "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"spring"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserConverter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//目标类 方法名      待转化类")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserDTO")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("userPO2DTO")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("table",[a("thead",[a("tr",[a("th",[t._v("分类")]),t._v(" "),a("th",[t._v("转化方法定义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("PO和DTO的属性个数和名称都相同")]),t._v(" "),a("td",[t._v("不用写@Mapping注解")])]),t._v(" "),a("tr",[a("td",[t._v("不同属性名的映射")]),t._v(" "),a("td",[t._v("使用@Mapping注解，其中source属性写PO中的属性名，target写DTO中的属性名")])]),t._v(" "),a("tr",[a("td",[t._v("多个不同类型源对象的转化")]),t._v(" "),a("td",[t._v("形参中传入这几个数据源，source部分使用对象名.参数名，target使用属性名")])]),t._v(" "),a("tr",[a("td",[t._v("转化复杂对象")]),t._v(" "),a("td",[t._v("类似于深克隆，需要转化的对象的成员变量中有引用型变量，就需要为该类型定义一个转化方法，然后在转化的外层对象过程中会自动调用该成员变量对应的转化方法")])]),t._v(" "),a("tr",[a("td",[t._v("转化List")]),t._v(" "),a("td",[t._v("先定义List"),a("T",[t._v("中的类型T的转化方法，然后在定义一个List的转化方法")])],1)])])]),t._v(" "),a("p",[t._v("多个不同类型源对象的转化举例：")]),t._v(" "),a("p",[t._v("任务：Student、User转化成StudentMember")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Mapper")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("componentModel "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"spring"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StudentMemberConverter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//数据来自多个对象的话，使用对象名.属性名指定source")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Mapping")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"student.name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" target "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Mapping")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"student.age"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" target "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"age"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Mapping")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"student.school"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" target "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"school"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Mapping")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"user.address"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" target "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"address"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StudentMemberDTO")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("studentPO2DTO")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),t._v(" student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("③ 使用定义的转化器接口")]),t._v(" "),a("h3",{attrs:{id:"_8-springboot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-springboot"}},[t._v("#")]),t._v(" 8. SpringBoot")]),t._v(" "),a("h4",{attrs:{id:"常用的注解和配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用的注解和配置"}},[t._v("#")]),t._v(" 常用的注解和配置")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SpringBootApplication")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@EnableDiscoveryClient")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@ComponentScan")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("basePackages "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"com.cskaoyan.mall"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@EnableFeignClients")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@MapperScan")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"com.cskaoyan.mall.product.mapper"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h4",{attrs:{id:"整合框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整合框架"}},[t._v("#")]),t._v(" 整合框架")]),t._v(" "),a("p",[t._v("starter依赖")]),t._v(" "),a("p",[t._v("通常在SpringBoot中要使用某一项技术，只需要引入其starter依赖就可以了。")]),t._v(" "),a("p",[t._v("SpringBoot官方提供的依赖一般叫：spring-boot-starter-xxx")]),t._v(" "),a("p",[t._v("例如：spring-boot-starter-web")]),t._v(" "),a("p",[t._v("第三方提供的依赖一般名叫：xxx-spring-boot-starter")]),t._v(" "),a("p",[t._v("例如：mybatis-spring-boot-starter")]),t._v(" "),a("h4",{attrs:{id:"约定大于配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#约定大于配置"}},[t._v("#")]),t._v(" 约定大于配置")]),t._v(" "),a("p",[t._v("在使用SpringBoot之前大量的配置是一件很麻烦的事，使用SpringBoot之后，SpringBoot提供了大量的默认配置，比如说如何连接数据库、如何设置web服务器、如何处理日志文件等。我们不需要手动配置这些，因为框架已经做了这些决策。")]),t._v(" "),a("p",[t._v("在SpringBoot项目中我们还可以直接接管配置，也可以对配置进行补充")]),t._v(" "),a("p",[t._v("以整合SpringMVC为例，在配置类")]),t._v(" "),a("ul",[a("li",[t._v("如果使用@EnableWebMVC意味着全面接管SpringMVC的相关配置，默认配置无效。")]),t._v(" "),a("li",[t._v("如果使用@Configuration意味着是对默认配置的补充。")])]),t._v(" "),a("h3",{attrs:{id:"_9-springcloud"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-springcloud"}},[t._v("#")]),t._v(" 9. SpringCloud")]),t._v(" "),a("h4",{attrs:{id:"微服务设计优势和原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微服务设计优势和原则"}},[t._v("#")]),t._v(" 微服务设计优势和原则")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://changjishun.github.io/blog/skills/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://changjishun.github.io/blog/skills/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1.html"),a("OutboundLink")],1)]),t._v(" "),a("h4",{attrs:{id:"openfeign简化服务间的调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#openfeign简化服务间的调用"}},[t._v("#")]),t._v(" OpenFeign简化服务间的调用")]),t._v(" "),a("p",[a("strong",[t._v("详细步骤")])]),t._v(" "),a("p",[t._v("① 添加依赖")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.cloud"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-starter-openfeign"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("② 定义用来调用用户服务的OpenFeign接口")]),t._v(" "),a("p",[t._v("在该接口中将你需要调用的服务的方法“原封不动”的复制到接口中，方法名可以不同。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@FeignClient")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"user-service"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserFeignClient")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RequestMapping")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/user/address/{id}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("address")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@PathVariable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("③ 在启动类上面添加注解@EnableFeignClients")]),t._v(" "),a("p",[t._v("④ 调用服务，使用上面定义的接口，通过调用上面接口的方法完成服务调用。")]),t._v(" "),a("p",[a("strong",[t._v("如果不使用OpenFeign的话，我们自己发送请求就会非常麻烦")])]),t._v(" "),a("p",[t._v('① 使用discoveryClient.getInstance("服务名称")从注册中心获取该服务的服务集群信息。')]),t._v(" "),a("p",[t._v("② 获取一个服务实例的地址，然后拼接url。")]),t._v(" "),a("p",[t._v("③ 使用restTemplate发送http请求。")]),t._v(" "),a("h4",{attrs:{id:"nacos服务注册中心"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nacos服务注册中心"}},[t._v("#")]),t._v(" Nacos服务注册中心")]),t._v(" "),a("p",[a("strong",[t._v("使用步骤")])]),t._v(" "),a("p",[a("strong",[t._v("服务端使用")])]),t._v(" "),a("p",[t._v("① 下载好Nacos安装包，使用命令行启动nacos服务器")]),t._v(" "),a("p",[a("strong",[t._v("客户端使用")])]),t._v(" "),a("p",[t._v("① 添加依赖")]),t._v(" "),a("p",[t._v("② 添加配置")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nacos")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("discovery")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# nacos服务器地址")]),t._v("\n\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server-addr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" localhost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8848")]),t._v("\n")])])]),a("p",[t._v("③ 在启动类添加注解@EnableDiscoveryClient")]),t._v(" "),a("p",[t._v("微服务是分布式架构的一种实现方式。为服务是分布式系统的独立运行单元。每个服务都有自己的数据库和业务逻辑，每个微服务都可以独立开发、测试、部署和扩展。")]),t._v(" "),a("h4",{attrs:{id:"nacos配置中心的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nacos配置中心的使用"}},[t._v("#")]),t._v(" Nacos配置中心的使用")]),t._v(" "),a("p",[a("strong",[t._v("Profile配置")])]),t._v(" "),a("p",[t._v("是每个服务自己的配置")]),t._v(" "),a("p",[t._v("① 每个服务自己的配置在nacos配置中心配置集的id(即data-id)满足下面的格式：（在nacos服务端网页“配置管理”中配置）")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("${prefix}-${spring.profiles.active}.${file-extension}\n")])])]),a("ul",[a("li",[a("code",[t._v("prefix")]),t._v("默认为spring.application.name的值（应用名称）")]),t._v(" "),a("li",[a("code",[t._v("spring.profiles.active")]),t._v("为当前环境对应的profile（")]),t._v(" "),a("li",[a("code",[t._v("file-extension")]),t._v("为配置内容的数据格式。目前只支持properties和yml")])]),t._v(" "),a("p",[t._v("举例：")]),t._v(" "),a("p",[t._v("应用名称为：user-service")]),t._v(" "),a("p",[t._v("环境为：dev")]),t._v(" "),a("p",[t._v("文件格式：yaml")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("user-service-dev.yaml\n")])])]),a("p",[t._v("② 添加nacos配置中心依赖")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("com.alibaba.cloud"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-starter-alibaba-nacos-config"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("③ 在resources目录下添加bootstrap.yml配置文件")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("application")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("service\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("profiles")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("active")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" dev\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nacos")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("config")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("file-extension")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" yaml\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server-addr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" localhost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8848")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#group: DEV_GROUP")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#namespace: b6d9c7c0-8189-4050-a83f-8bff345c0157")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 可以指定多个共享配置的配置集")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("shared-configs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("data-id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" common.yaml\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("group")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" SHARED_GROUP\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("refresh")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ${prefix}-${spring.profiles.active}.${file-extension}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# user-service-dev.yaml")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# user-service-test.yaml")]),t._v("\n")])])]),a("p",[t._v("④ 测试")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RestController")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RequestMapping")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/config"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigController")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${nacos.config}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" profile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RequestMapping")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/profile"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("profileConfigTest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" profile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("共享配置")])]),t._v(" "),a("p",[t._v("只要data-id不是按profile（服务自己的配置）的配置的data-id的格式写的，就是共享配置。")]),t._v(" "),a("p",[a("strong",[t._v("Nacos配置的持久化")])]),t._v(" "),a("p",[t._v("Nacos有一个自带的数据库derby，Nacos也支持mysql数据库。")]),t._v(" "),a("p",[t._v("将数据库改为MySql数据库")]),t._v(" "),a("p",[t._v("① 在数据库中创建一个名为nacos的数据库")]),t._v(" "),a("p",[t._v("② 在nacos数据库中执行数据库初始化文件(该文件在nacos的conf目录下)")]),t._v(" "),a("p",[t._v("③ 修改conf/application.properties文件，增加mysql数据源的设置，设置数据源的url、用户名、密码等信息。")]),t._v(" "),a("div",{staticClass:"language-properties extra-class"},[a("pre",{pre:!0,attrs:{class:"language-properties"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("spring.datasource.platform")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("mysql")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("db.num")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这里的url要改成你自己的mysql数据库地址，并在你的mysql中创建名为nacos的数据库")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("db.url.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("jdbc:mysql://localhost:3306/nacos?")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("characterEncoding")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这里要改成你自己登录mysql的用户名和密码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("db.user.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("nacos_devtest")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("db.password.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("youdontknow")]),t._v("\n")])])]),a("h4",{attrs:{id:"ribbon负载均衡策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ribbon负载均衡策略"}},[t._v("#")]),t._v(" Ribbon负载均衡策略")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("策略")]),t._v(" "),a("th",[t._v("实现类")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("随机策略")]),t._v(" "),a("td",[t._v("RandomRule")]),t._v(" "),a("td",[t._v("随机选择server")])]),t._v(" "),a("tr",[a("td",[t._v("轮训策略")]),t._v(" "),a("td",[t._v("RoundRobinRule")]),t._v(" "),a("td",[t._v("轮询选择")])]),t._v(" "),a("tr",[a("td",[t._v("重试策略")]),t._v(" "),a("td",[t._v("RetryRule")]),t._v(" "),a("td",[t._v("对选定的负载均衡策略(轮训)之上的重试机制，在一个配置时间段内当选择服务不成功，则一直尝试使用该策略选择一个可用的服务；")])]),t._v(" "),a("tr",[a("td",[t._v("最低并发策略")]),t._v(" "),a("td",[t._v("BestAvailableRule")]),t._v(" "),a("td",[t._v("逐个考察服务，如果服务断路器打开，则忽略，再选择其中并发连接最低的服务")])]),t._v(" "),a("tr",[a("td",[t._v("可用过滤策略")]),t._v(" "),a("td",[t._v("AvailabilityFilteringRule")]),t._v(" "),a("td",[t._v("过滤掉因一直失败并被标记为circuit tripped的服务，过滤掉那些高并发链接的服务（active connections超过配置的阈值)")])]),t._v(" "),a("tr",[a("td",[t._v("响应时间加权重策略")]),t._v(" "),a("td",[t._v("WeightedResponseTimeRule")]),t._v(" "),a("td",[t._v("根据server的响应时间分配权重，响应时间越长，权重越低，被选择到的概率也就越低。响应时间越短，权重越高，被选中的概率越高，这个策略很贴切，综合了各种因素，比如：网络，磁盘，io等，都直接影响响应时间")])]),t._v(" "),a("tr",[a("td",[t._v("区域权重策略")]),t._v(" "),a("td",[t._v("ZoneAvoidanceRule")]),t._v(" "),a("td",[t._v("综合判断服务所在区域的性能，和服务的压力，轮询选择server并且判断一个AWS Zone的运行性能是否可用，剔除不可用的Zone中的所有server")])])])]),t._v(" "),a("h3",{attrs:{id:"_10-elasticsearch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-elasticsearch"}},[t._v("#")]),t._v(" 10. ElasticSearch")]),t._v(" "),a("h4",{attrs:{id:"ik分词器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ik分词器"}},[t._v("#")]),t._v(" IK分词器")]),t._v(" "),a("p",[t._v("Ik分词器有两种模式：ik_max_word和ik_smart")]),t._v(" "),a("p",[t._v("ik_max_word模式会将文本做最细粒度的拆分")]),t._v(" "),a("p",[t._v("ik_smart会做最粗粒度的拆分")]),t._v(" "),a("h4",{attrs:{id:"elasticsearch介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#elasticsearch介绍"}},[t._v("#")]),t._v(" ElasticSearch介绍")]),t._v(" "),a("p",[t._v("Elastic Saerch是一个分布式全文搜索引擎，是一种文档数据库。")]),t._v(" "),a("p",[t._v("它和关系型数据库一样需要存储一条条记录(数据)，与关系型数据库不同的地方是"),a("strong",[t._v("索引")]),t._v("[^1]组织的方式和查询记录的方式。elasticsearch使用倒排索引来查询数据。")]),t._v(" "),a("p",[t._v("ElasticSearch基于C/S架构，默认端口号9200，它的操作都是使用http请求完成。")]),t._v(" "),a("p",[t._v("基本概念")]),t._v(" "),a("ul",[a("li",[t._v("字段(Field)：类似于关系型数据库中的字段")]),t._v(" "),a("li",[t._v("文档(document)：类似于关系型数据库中的一行记录")]),t._v(" "),a("li",[t._v("映射(mapping)：类似于关系型数据库中的表结构定义")]),t._v(" "),a("li",[t._v("索引(index)：类似于关系型数据库中的数据库概念")]),t._v(" "),a("li",[t._v("类型(Type)：类似于关系型数据库中的表")])]),t._v(" "),a("h4",{attrs:{id:"倒排索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#倒排索引"}},[t._v("#")]),t._v(" 倒排索引")]),t._v(" "),a("p",[t._v("此处所说的索引是用于快速访问数据的数据结构")]),t._v(" "),a("p",[t._v("正排")]),t._v(" "),a("p",[t._v("根据document找它包含的关键词")]),t._v(" "),a("p",[t._v("倒排")]),t._v(" "),a("p",[t._v("根据关键字找包含这个关键词的document。")]),t._v(" "),a("p",[a("strong",[t._v("添加索引")]),t._v("：数据(document)在添加时，会针对字符串类型的字段创建索引。具体的方式是，将字符串类型的字段进行"),a("strong",[t._v("分词")]),t._v("，然后以这些分出来的关键词为key，value部分存储包含这个关键词的document的id。")]),t._v(" "),a("h4",{attrs:{id:"常见的查询方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见的查询方式"}},[t._v("#")]),t._v(" 常见的查询方式")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("查询方式")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("match_all")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("match")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("term")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("querystring")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("范围、排序查询")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("bool复合查询")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("聚合查询")]),t._v(" "),a("td",[t._v('指标聚合：类似于MySQL的聚合函数。有max、min、avg、sum等。桶聚合：相当于MySQL的group by操作。不要对text类型的字段进行分组，会失败。"操作类型"为terms')])]),t._v(" "),a("tr",[a("td",[t._v("高亮查询")]),t._v(" "),a("td")])])]),t._v(" "),a("h3",{attrs:{id:"_11-minio"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-minio"}},[t._v("#")]),t._v(" 11. MinIO")]),t._v(" "),a("p",[t._v("MinIO是Apache开源的对象存储服务器，非常适合存储大容量非结构化数据、例如图片、视频、日志文件等，而一个对象文件可以是任意大小，从几kb到最大5T不等。")]),t._v(" "),a("p",[t._v("MinIO有如下特征")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("特征")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("高性能")]),t._v(" "),a("td",[t._v("可达到55GB/s的读速率、35GB/s的写速率")])]),t._v(" "),a("tr",[a("td",[t._v("可扩容")]),t._v(" "),a("td",[t._v("不同的MinIo集群可以组成联邦，并形成一个全局的命名空间，并跨越多个数据中心")])]),t._v(" "),a("tr",[a("td",[t._v("SDK支持")]),t._v(" "),a("td",[t._v("它有Java、Python、Go等语言的SDK支持")])]),t._v(" "),a("tr",[a("td",[t._v("支持纠删码")]),t._v(" "),a("td",[t._v("MinIO使用纠删码、Checksum来防止硬件错误和静默数据源污染。在最高冗余度配置下，即使丢失1/2的磁盘也能恢复数据")])]),t._v(" "),a("tr",[a("td",[t._v("有控制台界面")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("功能简单")]),t._v(" "),a("td",[t._v("这一设计原则使得MinIO不容易出错、更快启动")])])])]),t._v(" "),a("h3",{attrs:{id:"_12-rocketmq"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-rocketmq"}},[t._v("#")]),t._v(" 12. RocketMQ")]),t._v(" "),a("h4",{attrs:{id:"与其他消息度列的对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#与其他消息度列的对比"}},[t._v("#")]),t._v(" 与其他消息度列的对比")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("消息中间件")]),t._v(" "),a("th",[t._v("优点")]),t._v(" "),a("th",[t._v("不足")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("RocketMQ")]),t._v(" "),a("td",[t._v("经历过世界上绝无仅有的高并发的实战的考验(双十一)")]),t._v(" "),a("td",[t._v("社区不够活跃")])]),t._v(" "),a("tr",[a("td",[t._v("ActiveMQ")]),t._v(" "),a("td",[t._v("主要使用场景就是解耦和异步调用。")]),t._v(" "),a("td",[t._v("没经过大规模吞吐量场景的验证，开源社区不活跃")])]),t._v(" "),a("tr",[a("td",[t._v("RabbitMQ")]),t._v(" "),a("td",[t._v("使用erlang开发，队列基于内存，高并发低延迟。")]),t._v(" "),a("td",[t._v("开发语言小众，不利于自己基于源码开发扩展，遇到bug调试起来比较麻烦")])]),t._v(" "),a("tr",[a("td",[t._v("Kafka")]),t._v(" "),a("td",[t._v("可以实时的处理大量的数据，比如基于hadoop的批处理系统")]),t._v(" "),a("td",[t._v("消费失败不支持重试，支持消息顺序，但是一台代理宕机后就会产生消息乱序")])])])]),t._v(" "),a("h4",{attrs:{id:"生产者发送消息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生产者发送消息"}},[t._v("#")]),t._v(" 生产者发送消息")]),t._v(" "),a("p",[t._v("① 创建一个生产者对象DefaultMQProducer(构造器要传入生产者组名)")]),t._v(" "),a("p",[t._v("② 给生产者对象设置nameserver的ip地址")]),t._v(" "),a("p",[t._v("③ 启动生产者(使用start方法)")]),t._v(" "),a("p",[t._v("④ 创建消息Message对象")]),t._v(" "),a("p",[t._v('⑤ 使用setTopic()给消息对象设置topic，使用setBody()设置消息内容(消息内容为byte[]类型，字符串消息需要使用字符串的getBytes(Charset.forName("utf-8"))获取)')]),t._v(" "),a("p",[t._v("⑥ 使用producer的send方法发送消息")]),t._v(" "),a("h4",{attrs:{id:"消费者接收消息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消费者接收消息"}},[t._v("#")]),t._v(" 消费者接收消息")]),t._v(" "),a("p",[t._v("① 创建一个消费者对象DefaultMQPushConsumer(需要指定消费者组名)")]),t._v(" "),a("p",[t._v("② 设置nameserver地址")]),t._v(" "),a("p",[t._v("③ 订阅主题(使用subscribe方法)")]),t._v(" "),a("p",[t._v("④ 设置消息监听器 (使用setMessageListener()，参数为匿名内部类对象，用于指定收到消息后如何处理消息)。")]),t._v(" "),a("p",[t._v("⑤ 实现监听器的匿名内部类对象的的方法")]),t._v(" "),a("p",[t._v("⑥ 启动consumer，使用consumer的start方法")]),t._v(" "),a("h4",{attrs:{id:"延迟消息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#延迟消息"}},[t._v("#")]),t._v(" 延迟消息")]),t._v(" "),a("p",[t._v("只需要给生产者发送的消息对象设置延时就行了")]),t._v(" "),a("p",[t._v("设置的延时时间是延时的级别，不同的延时级别对应不同的延时时间。")]),t._v(" "),a("h2",{attrs:{id:"项目介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目介绍"}},[t._v("#")]),t._v(" 项目介绍")]),t._v(" "),a("p",[t._v("在这个项目中，我参与了母婴商城的开发，主要负责商品详情和搜索服务的开发。以下是我在项目中的一些关键技术点和工作职责：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("商品详情缓存")]),t._v("：为了提高商品数据的访问速度，我使用了Redis作为缓存存储，并利用Spring的AOP和自定义注解定义切点，实现了对商品数据的缓存。这样，在用户请求商品详情时，首先会检查Redis中是否存在缓存，如果存在则直接返回缓存数据，提高了响应速度。")]),t._v(" "),a("li",[a("strong",[t._v("搜索功能")]),t._v("：为了实现高效的商品搜索，我使用了Elasticsearch作为文档数据库。通过对商品的各种搜索条件建立索引，实现了快速的全文检索功能。用户可以根据关键字、分类、价格等条件进行商品搜索，并得到相关的搜索结果。")]),t._v(" "),a("li",[a("strong",[t._v("缓存预热")]),t._v("：为了避免缓存冷启动的问题，我使用了Redis缓存预热的技术。通过定时任务和缓存预热策略，提前将热门商品的数据加载到缓存中，减少了用户请求时的数据查询时间，提高了系统的性能和用户体验。")]),t._v(" "),a("li",[a("strong",[t._v("非结构化数据存储")]),t._v("：为了提高图片等非结构化数据的存储和访问效率，我使用了MinIO对象存储服务器。通过MinIO，我们可以将图片等数据以对象的形式存储，并通过获取对象的URL进行访问，提高了数据的访问效率和可靠性。")]),t._v(" "),a("li",[a("strong",[t._v("数据同步")]),t._v("：为了保持数据的一致性，我使用了RocketMQ的消息队列实现了商品的上下架时Elasticsearch和MySQL的数据同步。当商品上下架时，系统会将相应的消息发送到RocketMQ，然后由消费者监听消息并进行相应的数据同步操作，确保Elasticsearch和MySQL中的数据保持一致性。")])]),t._v(" "),a("p",[t._v("以上是我在母婴商城项目中的部分工作内容和技术要点。通过这个项目，我熟悉了Spring、SpringMVC、SpringBoot和Mybatis-Plus等技术栈，同时也获得了在分布式系统和电子商务领域的实际经验。")])])}),[],!1,null,null,null);a.default=e.exports}}]);